/* jslint node:true */
/* jslint nomen:true */
/* jslint esversion:6 */
'use strict';

module.exports = function(Customeruser) {
	/** This call adds custom behaviour to the standard Loopback login.
	 *
	 *  Since it uses the User.login function of the User model, let's also
	 *  keep the same parameter structure.
	 */
  Customeruser.addToLogin = function(credentials, include, callback) {
		// Invoke the default login function
    return Customeruser.login(credentials, include, function(loginErr, loginToken) {
      if (loginErr)
        return callback(loginErr);
			/* If we got to this point, the login call was successfull and we
			 * have now access to the token generated by the login function.
			 *
			 * This means that now we can add extra logic and manipulate the
			 * token before returning it. Unfortunately, the login function
			 * does not return the user data, so if we need it we need to hit
			 * the datasource again to retrieve it.
			 */

			// If needed, here we can use loginToken.userId to retrieve
            // the user from the datasource

      return Customeruser.findById(loginToken.userId, function(findErr, userData) {
        loginToken.role = userData.role;
        if (findErr)
          return callback(findErr);

				// Here you can do something with the user info, or the token, or both

				// Return the access token
        return callback(null, loginToken.toObject());
      });
    });
  };

	/** Register a path for the new login function
	 */
  Customeruser.remoteMethod('addToLogin', {
    'http': {
      'path': '/signin',
      'verb': 'post',
    },
    'accepts': [
      {
        'arg': 'credentials',
        'type': 'object',
        'description': 'Login credentials',
        'required': true,
        'http': {
          'source': 'body',
        },
      },
      {
        'arg': 'include',
        'type': 'string',
        'description': 'Related objects to include in the response. See the description of return value for more details.',
        'http': {
          'source': 'query',
        },
      },
    ],
    'returns': [
      {
        'arg': 'token',
        'type': 'object',
        'root': true,
      },
    ],
  });

  Customeruser.disableRemoteMethodByName('upsert');                               // disables PATCH /Customerusers
  Customeruser.disableRemoteMethodByName('find');                                 // disables GET /Customerusers
  Customeruser.disableRemoteMethodByName('replaceOrCreate');                      // disables PUT /Customerusers
//  Customeruser.disableRemoteMethodByName('create');                               // disables POST /Customerusers

  Customeruser.disableRemoteMethodByName('prototype.updateAttributes');           // disables PATCH /Customerusers/{id}
  Customeruser.disableRemoteMethodByName('findById');                             // disables GET /Customerusers/{id}
  Customeruser.disableRemoteMethodByName('exists');                               // disables HEAD /Customerusers/{id}
  Customeruser.disableRemoteMethodByName('replaceById');                          // disables PUT /Customerusers/{id}
  Customeruser.disableRemoteMethodByName('deleteById');                           // disables DELETE /Customerusers/{id}
  
  Customeruser.disableRemoteMethodByName('prototype.__get__accessTokens');        // disable GET /Customerusers/{id}/accessTokens
  Customeruser.disableRemoteMethodByName('prototype.__create__accessTokens');     // disable POST /Customerusers/{id}/accessTokens
  Customeruser.disableRemoteMethodByName('prototype.__delete__accessTokens');     // disable DELETE /Customerusers/{id}/accessTokens

  Customeruser.disableRemoteMethodByName('prototype.__findById__accessTokens');   // disable GET /Customerusers/{id}/accessTokens/{fk}
  Customeruser.disableRemoteMethodByName('prototype.__updateById__accessTokens'); // disable PUT /Customerusers/{id}/accessTokens/{fk}
  Customeruser.disableRemoteMethodByName('prototype.__destroyById__accessTokens');// disable DELETE /Customerusers/{id}/accessTokens/{fk}

  Customeruser.disableRemoteMethodByName('prototype.__count__accessTokens');      // disable  GET /Customerusers/{id}/accessTokens/count

  Customeruser.disableRemoteMethodByName('prototype.verify');                     // disable POST /Customerusers/{id}/verify
  Customeruser.disableRemoteMethodByName('changePassword');                       // disable POST /Customerusers/change-password
  Customeruser.disableRemoteMethodByName('createChangeStream');                   // disable GET and POST /Customerusers/change-stream

  Customeruser.disableRemoteMethodByName('confirm');                              // disables GET /Customerusers/confirm
  Customeruser.disableRemoteMethodByName('count');                                // disables GET /Customerusers/count
  Customeruser.disableRemoteMethodByName('findOne');                              // disables GET /Customerusers/findOne

  Customeruser.disableRemoteMethodByName('login');                                // disables POST /Customerusers/login
  // Customeruser.disableRemoteMethodByName('logout');                               // disables POST /Customerusers/logout

  Customeruser.disableRemoteMethodByName('resetPassword');                        // disables POST /Customerusers/reset
  Customeruser.disableRemoteMethodByName('setPassword');                          // disables POST /Customerusers/reset-password
  Customeruser.disableRemoteMethodByName('update');                               // disables POST /Customerusers/update
  Customeruser.disableRemoteMethodByName('upsertWithWhere');                      // disables POST /Customerusers/upsertWithWhere
};
