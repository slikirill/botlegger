{"version":3,"sources":["ng://saturn-datepicker/datetime/date-adapter.ts","ng://saturn-datepicker/datetime/date-formats.ts","null","ng://saturn-datepicker/datetime/native-date-adapter.ts","ng://saturn-datepicker/datetime/native-date-formats.ts","ng://saturn-datepicker/datetime/index.ts","ng://saturn-datepicker/datepicker/datepicker-errors.ts","ng://saturn-datepicker/datepicker/datepicker-intl.ts","ng://saturn-datepicker/datepicker/calendar-body.ts","ng://saturn-datepicker/datepicker/month-view.ts","ng://saturn-datepicker/datepicker/multi-year-view.ts","ng://saturn-datepicker/datepicker/year-view.ts","ng://saturn-datepicker/datepicker/calendar.ts","ng://saturn-datepicker/datepicker/datepicker-animations.ts","ng://saturn-datepicker/datepicker/datepicker.ts","ng://saturn-datepicker/datepicker/datepicker-input.ts","ng://saturn-datepicker/datepicker/datepicker-toggle.ts","ng://saturn-datepicker/datepicker/datepicker-module.ts"],"names":["MAT_DATE_LOCALE","InjectionToken","providedIn","factory","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","MAT_DATE_LOCALE_PROVIDER","provide","useExisting","DateAdapter","Subject","Object","defineProperty","prototype","this","_localeChanges","deserialize","value","isDateInstance","isValid","invalid","setLocale","locale","next","compareDate","first","second","getYear","getMonth","getDate","sameDate","firstValid","secondValid","clampDate","date","min","max","MAT_DATE_FORMATS","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","long","short","narrow","DEFAULT_DATE_NAMES","range","String","DEFAULT_DAY_OF_WEEK_NAMES","FIRST_DAY_OF_WEEK","af","ar","ar-ly","ar-ma","ar-tn","az","be","bg","bm","br","bs","ca","cs","cv","cy","da","de","de-at","de-ch","el","en-au","en-gb","en-ie","en-nz","eo","es","es-do","et","eu","fa","fi","fo","fr","fr-ch","fy","gd","gl","gom-latn","hr","hu","hy-am","id","is","it","jv","ka","kk","km","ky","lb","lt","lv","me","mi","mk","ms","ms-my","mt","my","nb","nl","nl-be","nn","pl","pt","pt-BR","ro","ru","sd","se","sk","sl","sq","sr","sr-cyrl","ss","sv","sw","tet","tg","tl-ph","tlh","tr","tzl","tzm","tzm-latn","ug-cn","uk","ur","uz","uz-latn","vi","x-pseudo","yo","zh-cn","ISO_8601_REGEX","valueFunction","valuesArray","NativeDateAdapter","matDateLocale","platform","_this","_super","useUtcForDisplay","TRIDENT","_clampDate","EDGE","tslib_1.__extends","getFullYear","getDayOfWeek","getDay","getMonthNames","style","dtf_1","DateTimeFormat","month","timeZone","_stripDirectionalityCharacters","_format","Date","getDateNames","dtf_2","day","getDayOfWeekNames","dtf_3","weekday","getYearName","dtf","year","getFirstDayOfWeek","toLowerCase","substr","getNumDaysInMonth","_createDateWithOverflow","clone","createDate","Error","result","today","parse","format","displayFormat","setFullYear","Math","toDateString","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","obj","isNaN","getTime","NaN","slice","str","replace","UTC","getHours","getMinutes","getSeconds","getMilliseconds","Injectable","Optional","type","Inject","args","Platform","MAT_NATIVE_DATE_FORMATS","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","NgModule","imports","PlatformModule","providers","useClass","NativeDateModule","useValue","Éµ0$1","createMissingDateImplError","provider","SatCalendarCell","displayValue","ariaLabel","enabled","SatCalendarBody","_elementRef","_ngZone","EventEmitter","_cellClicked","cell","allowDisabledSelection","selectedValueChange","emit","rows","numCols","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","activeCell","_isSemiSelected","rangeMode","rangeFull","begin","end","_focusActiveCell","runOutsideAngular","onStable","asObservable","pipe","take","subscribe","nativeElement","querySelector","focus","Component","moduleId","module","selector","template","host","class","role","attr.aria-readonly","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","NgZone","Input","Output","SatMonthView","_changeDetectorRef","_dateFormats","_dateAdapter","_dir","firstDayOfWeek","narrowWeekdays","weekdays","map","_weekdays","concat","_activeDate","_beginDate","_getValidDateOrNull","updateRangeSpecificValues","_endDate","oldActiveDate","validDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selected","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","ngAfterContentInit","_dateSelected","selectedYear","activeDate","selectedMonth","selectedDate","_beginDateSelected","selectedChange","_userSelection","_handleCalendarBodyKeydown","event","isRtl","_isRtl","keyCode","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","END","PAGE_UP","altKey","PAGE_DOWN","ENTER","dateFilter","preventDefault","activeDateChange","selected","_todayDate","_monthLabel","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","_createWeekCells","markForCheck","_matCalendarBody","daysInMonth","dateNames","_weeks","push","_shouldEnableDate","d1","d2","_beginDateNumber","_endDateNumber","_rangeFull","beginDate","endDate","ChangeDetectorRef","decorators","Directionality","ViewChild","yearsPerPage","SatMultiYearView","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","_createCellForYear","_yearSelected","yearSelected","_getActiveCell","yearName","_shouldEnableYear","undefined","SatYearView","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","SatCalendarHeader","_intl","calendar","changeDetectorRef","stateChanges","currentView","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","orderPeriod","orderPeriodLabel","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","SatDatepickerIntl","SatCalendar","forwardRef","_intlChanges","changes","_startAt","_clampedActiveDate","_currentView","_moveFocusOnNextTick","_calendarHeaderPortal","ComponentPortal","headerComponent","startAt","startView","ngAfterViewChecked","focusActiveCell","ngOnDestroy","unsubscribe","complete","ngOnChanges","change","firstChange","view","_getCurrentViewComponent","detectChanges","dateRangesChange","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","monthView","yearView","multiYearView","matDatepickerAnimations","transformPanel","trigger","state","opacity","transform","transition","group","query","animateChild","animate","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","SatDatepickerContentBase","_SatDatepickerContentMixinBase","mixinColor","SatDatepickerContent","elementRef","ngAfterViewInit","_calendar","close","datepicker","closeAfterSelection","[@transformPanel]","[class.mat-datepicker-content-touch]","animations","inputs","SatDatepicker","_dialog","_overlay","_viewContainerRef","_scrollStrategy","_document","Subscription","EMPTY","_rangeMode","mode","_validSelected","_datepickerInput","_color","_getThemePalette","_touchUi","coerceBooleanProperty","_disabled","disabled","newValue","_disabledChange","_opened","open","_dateFilter","_inputSubscription","_popupRef","dispose","_popupComponentRef","_select","oldValue","_selectedChanged","_selectRange","dates","_selectYear","_selectMonth","_registerInput","input","_valueChange","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","openedStream","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","closedStream","setTimeout","direction","viewContainerRef","panelClass","afterClosed","componentInstance","_setColor","_createPopup","attach","instance","updatePosition","overlayConfig","OverlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","scrollStrategy","overlayElement","setAttribute","merge","backdropClick","detachments","keydownEvents","filter","ESCAPE","position","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPush","withPositions","originX","originY","overlayX","overlayY","color","MatDialog","ViewContainerRef","DOCUMENT","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","SatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","SatDatepickerInputEvent","target","targetElement","_formField","_lastValueValid","matDatepickerParse","text","control","_datepicker","matDatepickerMin","actual","controlValue","matDatepickerMax","matDatepickerFilter","matDatepickerRange","Validators","compose","_parseValidator","_minValidator","_maxValidator","_filterValidator","_rangeValidator","_localeSubscription","localeChanges","registerDatepicker","_validatorOnChange","_value","rangeValue","oldDate","_min","_max","element","blur","_datepickerSubscription","_cvaOnChange","_onTouched","dateChange","registerOnValidatorChange","fn","validate","c","_validator","getPopupConnectionElementRef","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","_onInput","parts","split","beginDateString","endDateString","_onChange","_onBlur","_formatValue","Directive","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","MatFormField","SatDatepickerToggle","_watchStateChanges","_stateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","ContentChild","SatDatepickerToggleIcon","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","PortalModule","exports","declarations","entryComponents"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<sat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n/** First day of week according locale.\n * Taken form moment.js source code https://github.com/moment/moment/tree/develop/src/locale\n */\nconst FIRST_DAY_OF_WEEK = {\n  af:1, ar:6, 'ar-ly':6, 'ar-ma':6, 'ar-tn':1, az:1, be:1, bg:1, bm:1, br:1, bs:1, ca:1, cs:1, cv:1,\n  cy:1, da:1, de:1, 'de-at':1, 'de-ch':1, el:1, 'en-au':1, 'en-gb':1, 'en-ie':1, 'en-nz':1, eo:1,\n  es:1, 'es-do':1, et:1, eu:1, fa:6, fi:1, fo:1, fr:1, 'fr-ch':1, fy:1, gd:1, gl:1, 'gom-latn':1,\n  hr:1, hu:1, 'hy-am':1, id:1, is:1, it:1, jv:1, ka:1, kk:1, km:1, ky:1, lb:1, lt:1, lv:1, me:1,\n  mi:1, mk:1, ms:1, 'ms-my':1, mt:1, my:1, nb:1, nl:1, 'nl-be':1, nn:1, pl:1, pt:1, 'pt-BR': 0, ro:1, ru:1,\n  sd:1, se:1, sk:1, sl:1, sq:1, sr:1, 'sr-cyrl':1, ss:1, sv:1, sw:1, 'tet':1, tg:1, 'tl-ph':1,\n  'tlh':1, tr:1, 'tzl':1, 'tzm':6, 'tzm-latn':6, 'ug-cn':1, uk:1, ur:1, uz:1, 'uz-latn':1, vi:1,\n  'x-pseudo':1, yo:1, 'zh-cn':1,\n};\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is.\n    // Sometimes people use excess language definition, e.g. ru-RU,\n    // so we use fallback to two-letter language code\n    const locale = this.locale.toLowerCase();\n    return FIRST_DAY_OF_WEEK[locale] || FIRST_DAY_OF_WEEK[locale.substr(0, 2)] || 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n    parse: {\n        dateInput: null,\n    },\n    display: {\n        dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n        monthYearLabel: {year: 'numeric', month: 'short'},\n        dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n        monthYearA11yLabel: {year: 'numeric', month: 'long'},\n    }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n    imports: [PlatformModule],\n    providers: [\n        {provide: DateAdapter, useClass: NativeDateAdapter},\n    ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n    imports: [NativeDateModule],\n    providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class SatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `SatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n        `modules at your application root: SatNativeDateModule, MatMomentDateModule, or provide a ` +\n        `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class SatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class SatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[sat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: SatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The value in the table since range of dates started.\n   * Null means no interval or interval doesn't start in this month\n   */\n  @Input() begin: number|null;\n\n  /** The value in the table representing end of dates range.\n   * Null means no interval or interval doesn't end in this month\n   */\n  @Input() end: number|null;\n\n  /** Whether to mark all dates as semi-selected. */\n  @Input() rangeFull: boolean;\n\n  /** Whether to use date range selection behaviour.*/\n  @Input() rangeMode = false;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: SatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Whenever to mark cell as semi-selected (inside dates interval). */\n  _isSemiSelected(date: number) {\n    if (!this.rangeMode) {\n      return false;\n    }\n    if (this.rangeFull) {\n      return true;\n    }\n    /** Do not mark start and end of interval. */\n    if (date === this.begin || date === this.end) {\n      return false;\n    }\n    if (this.begin && !this.end) {\n      return date > this.begin;\n    }\n    if (this.end && !this.begin) {\n      return date < this.end;\n    }\n    return date > <number>this.begin && date < <number>this.end;\n  }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell() {\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n            });\n        });\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SatCalendarBody, SatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SatMonthView<D> implements AfterContentInit {\n\n  /** Current start of interval. */\n  @Input()\n  get beginDate(): D | null { return this._beginDate; }\n  set beginDate(value: D | null) {\n    this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this.updateRangeSpecificValues();\n  }\n  private _beginDate: D | null;\n\n  /** Current end of interval. */\n  @Input()\n  get endDate(): D | null { return this._endDate; }\n  set endDate(value: D | null) {\n    this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this.updateRangeSpecificValues();\n  }\n  private _endDate: D | null;\n\n  /** Allow selecting range of dates. */\n  @Input() rangeMode = false;\n\n  /** First day of interval. */\n  _beginDateNumber: number | null;\n\n  /* Last day of interval. */\n  _endDateNumber: number | null;\n\n  /** Whenever full month is inside dates interval. */\n  _rangeFull: boolean | null = false;\n\n  /** Whenever user already selected start of dates interval. */\n  private _beginDateSelected = false;\n\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(SatCalendarBody) _matCalendarBody: SatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: SatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n\n    if (this.rangeMode) {\n\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n      if (!this._beginDateSelected) { // At first click emit the same start and end of interval\n        this._beginDateSelected = true;\n        this.selectedChange.emit(selectedDate);\n      } else {\n        this._beginDateSelected = false;\n        this.selectedChange.emit(selectedDate);\n        this._userSelection.emit();\n      }\n    } else if (this._selectedDate != date) {\n\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n      this._userSelection.emit();\n    }\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this.updateRangeSpecificValues();\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates SatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new SatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n  /** Updates range full parameter on each begin or end of interval update.\n   * Necessary to display calendar-body correctly\n   */\n  private updateRangeSpecificValues(): void {\n    if (this.rangeMode) {\n      this._beginDateNumber = this._getDateInCurrentMonth(this._beginDate);\n      this._endDateNumber = this._getDateInCurrentMonth(this._endDate);\n      this._rangeFull = this.beginDate && this.endDate && !this._beginDateNumber &&\n        !this._endDateNumber &&\n        this._dateAdapter.compareDate(this.beginDate, this.activeDate) <= 0 &&\n        this._dateAdapter.compareDate(this.activeDate, this.endDate) <= 0;\n    } else {\n      this._beginDateNumber = this._endDateNumber = null;\n      this._rangeFull = false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SatCalendarBody, SatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {DateAdapter} from '../datetime/date-adapter';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(SatCalendarBody) _matCalendarBody: SatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: SatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an SatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new SatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SatCalendarBody, SatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(SatCalendarBody) _matCalendarBody: SatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: SatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an SatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new SatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {SatDatepickerIntl} from './datepicker-intl';\nimport {SatMonthView} from './month-view';\nimport {SatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {SatYearView} from './year-view';\n\nimport {SatDatepickerRangeValue} from './datepicker-input';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type SatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for SatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendarHeader<D> {\n  constructor(private _intl: SatDatepickerIntl,\n              @Inject(forwardRef(() => SatCalendar)) public calendar: SatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label.\n   * Option`calendar.orderPeriodLabel` sort the label period views.\n   * - Default [multi-year]: multi-year then back to month\n   * - Month [month]: month > year > multi-year\n   */\n  currentPeriodClicked(): void {\n    const mouthFirstOrder: SatCalendarView[] = ['month', 'year', 'multi-year'];\n    const defaultOrder: SatCalendarView[] = ['month', 'multi-year', 'month'];\n    const orderPeriod = this.calendar.orderPeriodLabel === 'month' ? mouthFirstOrder : defaultOrder;\n    switch (this.calendar.currentView) {\n      case 'month':\n        this.calendar.currentView = orderPeriod[1];\n        break;\n      case 'year':\n          this.calendar.currentView = orderPeriod[2]\n          break;\n      default:\n        this.calendar.currentView = orderPeriod[0]\n        break;\n    }\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** Beginning of date range. */\n    @Input()\n    get beginDate(): D | null { return this._beginDate; }\n    set beginDate(value: D | null) {\n        this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    private _beginDate: D | null;\n\n    /** Date range end. */\n    @Input()\n    get endDate(): D | null { return this._endDate; }\n    set endDate(value: D | null) {\n        this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    private _endDate: D | null;\n\n    /** Whenever datepicker is for selecting range of dates. */\n    @Input() rangeMode = false;\n\n    /** Emits when new pair of dates selected. */\n    @Output() dateRangesChange = new EventEmitter<SatDatepickerRangeValue<D>>();\n\n\n    /** Whenever user already selected start of dates interval. */\n    private _beginDateSelected = false;\n\n    /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: SatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Order the views when clicking on period label button */\n  @Input() orderPeriodLabel: 'multi-year' | 'month' = 'multi-year';\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(SatMonthView) monthView: SatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(SatYearView) yearView: SatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(SatMultiYearView) multiYearView: SatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): SatCalendarView { return this._currentView; }\n  set currentView(value: SatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: SatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: SatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || SatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (this.rangeMode) {\n        if (!this._beginDateSelected) {\n          this._beginDateSelected = true;\n          this.beginDate = date;\n          this.endDate = date;\n        } else {\n          this._beginDateSelected = false;\n          if (this._dateAdapter.compareDate(<D>this.beginDate, date) <= 0) {\n            this.dateRangesChange.emit({begin: <D>this.beginDate, end: date});\n          } else {\n            this.dateRangesChange.emit({begin: date, end: <D>this.beginDate});\n          }\n        }\n    } else if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata,\n    group,\n    query,\n    animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n        state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n        transition('void => enter', group([\n            query('@fadeInCalendar', animateChild()),\n            animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', animate('100ms linear', style({opacity: 0})))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({opacity: 0})),\n        state('enter', style({opacity: 1})),\n        transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {SatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {SatDatepickerInput, SatDatepickerRangeValue} from './datepicker-input';\nimport {DateAdapter} from '../datetime/date-adapter';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('sat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to SatDatepickerContent.\n/** @docs-private */\nexport class SatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _SatDatepickerContentMixinBase = mixinColor(SatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * SatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class SatDatepickerContent<D> extends _SatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(SatCalendar) _calendar: SatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: SatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n\n  close() {\n    if (this.datepicker.closeAfterSelection) {\n      this.datepicker.close();\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SatDatepicker<D> implements OnDestroy, CanColor {\n\n  /** Whenever datepicker is for selecting range of dates. */\n  @Input()\n  get rangeMode(): boolean {\n    return this._rangeMode;\n  }\n  set rangeMode(mode: boolean) {\n    this._rangeMode = mode;\n    if (this.rangeMode) {\n      this._validSelected = null;\n    } else {\n      this._beginDate = this._endDate = null;\n    }\n  }\n  private _rangeMode;\n\n  /** Start of dates interval. */\n  @Input()\n  get beginDate(): D | null { return this._beginDate; }\n  set beginDate(value: D | null) {\n    this._validSelected = null;\n    this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _beginDate: D | null;\n\n  /** End of dates interval. */\n  @Input()\n  get endDate(): D | null { return this._endDate; }\n  set endDate(value: D | null) {\n    this._validSelected = null;\n    this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _endDate: D | null;\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    if (this.rangeMode) {\n      return this._startAt || (this._datepickerInput && this._datepickerInput.value ?\n        (<SatDatepickerRangeValue<D>>this._datepickerInput.value).begin : null);\n    }\n    return this._startAt || (this._datepickerInput ? <D|null>this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Enables datepicker closing after selection */\n  @Input() closeAfterSelection = true;\n\n  /** Order the views when clicking on period label button */\n  @Input() orderPeriodLabel: 'month' | 'multi-year' = 'multi-year';\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `sat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<SatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<SatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<SatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: SatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<SatDatepickerRangeValue<D>|D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n\n  /** Selects the given date range */\n  _selectRange(dates: SatDatepickerRangeValue<D>): void {\n    if (!this._dateAdapter.sameDate(dates.begin, this.beginDate) ||\n      !this._dateAdapter.sameDate(dates.end, this.endDate)) {\n      this._selectedChanged.next(dates);\n    }\n    this._beginDate = dates.begin;\n    this._endDate = dates.end;\n  }\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: SatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A SatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange\n          .subscribe((value: SatDatepickerRangeValue<D> | D | null) => {\n          if (value === null) {\n            this.beginDate = this.endDate = this._selected = null;\n            return;\n          }\n          if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {\n            value = <SatDatepickerRangeValue<D>>value;\n            if (value.begin && value.end &&\n              this._dateAdapter.compareDate(value.begin, value.end) <= 0) {\n              this.beginDate = value.begin;\n              this.endDate = value.end;\n            } else {\n              this.beginDate = this.endDate = null;\n            }\n          } else {\n            this._selected = <D>value;\n          }\n        });\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an SatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<SatDatepickerContent<D>>(SatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<SatDatepickerContent<D>>(SatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {SatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => SatDatepickerInput),\n  multi: true\n};\n\n/**\n * Special interface to input and output dates interval.\n */\nexport interface SatDatepickerRangeValue<D> {\n  begin: D | null;\n  end: D | null;\n}\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use SatDatepickerInputEvent instead.\n */\nexport class SatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: SatDatepickerRangeValue<D> | D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: SatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a SatDatepicker. */\n@Directive({\n  selector: 'input[satDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: SatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class SatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set satDatepicker(value: SatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: SatDatepicker<D>;\n\n  private registerDatepicker(value: SatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: SatDatepickerRangeValue<D> | D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): SatDatepickerRangeValue<D> | D | null {\n    return this._value;\n  }\n  set value(value:  SatDatepickerRangeValue<D> | D | null) {\n    if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {\n      /** Range mode */\n      const rangeValue = <SatDatepickerRangeValue<D>>value;\n      rangeValue.begin = this._dateAdapter.deserialize(rangeValue.begin);\n      rangeValue.end = this._dateAdapter.deserialize(rangeValue.end);\n      this._lastValueValid = !rangeValue.begin || !rangeValue.end ||\n          this._dateAdapter.isValid(rangeValue.begin) && this._dateAdapter.isValid(rangeValue.end);\n      rangeValue.begin = this._getValidDateOrNull(rangeValue.begin);\n      rangeValue.end = this._getValidDateOrNull(rangeValue.end);\n      let oldDate = <SatDatepickerRangeValue<D> | null>this.value;\n      this._elementRef.nativeElement.value =\n          rangeValue && rangeValue.begin && rangeValue.end\n              ? this._dateAdapter.format(rangeValue.begin, this._dateFormats.display.dateInput) +\n                ' - ' +\n                this._dateAdapter.format(rangeValue.end, this._dateFormats.display.dateInput)\n              : '';\n      if (oldDate == null && rangeValue != null || oldDate != null && rangeValue == null ||\n          !this._dateAdapter.sameDate((<SatDatepickerRangeValue<D>>oldDate).begin,\n              rangeValue.begin) ||\n          !this._dateAdapter.sameDate((<SatDatepickerRangeValue<D>>oldDate).end,\n              rangeValue.end)) {\n        if (rangeValue.end && rangeValue.begin &&\n            this._dateAdapter\n                .compareDate(rangeValue.begin, rangeValue.end ) > 0) { // if begin > end\n          value = null;\n        }\n        this._value = value;\n        this._valueChange.emit(value);\n      }\n    } else {\n      /** Not range mode */\n      value = this._dateAdapter.deserialize(value);\n      this._lastValueValid = !value || this._dateAdapter.isValid(value);\n      value = this._getValidDateOrNull(value);\n      let oldDate = this.value;\n      this._value = value;\n      this._elementRef.nativeElement.value =\n          value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n      if (!this._dateAdapter.sameDate(<D>oldDate, value)) {\n        this._valueChange.emit(value);\n      }\n    }\n  }\n  private _value: SatDatepickerRangeValue<D> | D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<SatDatepickerInputEvent<D>> =\n      new EventEmitter<SatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<SatDatepickerInputEvent<D>> =\n      new EventEmitter<SatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<SatDatepickerRangeValue<D>|D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      if (this.min) {\n        if (beginDate && this._dateAdapter.compareDate(this.min, beginDate) > 0) {\n          return {'matDatepickerMin': {'min': this.min, 'actual': beginDate}};\n        }\n        if (endDate && this._dateAdapter.compareDate(this.min, endDate) > 0) {\n          return {'matDatepickerMin': {'min': this.min, 'actual': endDate}};\n        }\n      }\n      return null;\n    }\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      if (this.max) {\n        if (beginDate && this._dateAdapter.compareDate(this.max, beginDate) < 0 ) {\n          return {'matDatepickerMax': {'max': this.max, 'actual': beginDate}};\n        }\n        if (endDate && this._dateAdapter.compareDate(this.max, endDate) < 0) {\n          return {'matDatepickerMax': {'max': this.max, 'actual': endDate}};\n        }\n      }\n      return null;\n    }\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      return !this._dateFilter || !beginDate && !endDate ||\n          this._dateFilter(beginDate) && this._dateFilter(endDate) ?\n        null : {'matDatepickerFilter': true};\n    }\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The form control validator for the date filter. */\n  private _rangeValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      return !beginDate || !endDate || this._dateAdapter.compareDate(beginDate, endDate) <= 0 ?\n        null : {'matDatepickerRange': true};\n    }\n    return null;\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator,\n            this._filterValidator, this._rangeValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker._selectedChanged.subscribe((selected: SatDatepickerRangeValue<D> | D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: SatDatepickerRangeValue<D> | D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date: SatDatepickerRangeValue<D>|D|null = null;\n    if (this._datepicker.rangeMode) {\n      const parts = value.split('-');\n      if (parts.length > 1) {\n          const position = Math.floor(parts.length / 2);\n          const beginDateString = parts.slice(0, position).join('-');\n          const endDateString = parts.slice(position).join('-');\n          let beginDate = this._dateAdapter.parse(beginDateString,\n              this._dateFormats.parse.dateInput);\n          let endDate = this._dateAdapter.parse(endDateString, this._dateFormats.parse.dateInput);\n          this._lastValueValid = !beginDate || !endDate || this._dateAdapter.isValid(beginDate) &&\n                                                           this._dateAdapter.isValid(endDate);\n          beginDate = this._getValidDateOrNull(beginDate);\n          endDate = this._getValidDateOrNull(endDate);\n          if (beginDate && endDate) {\n            date = <SatDatepickerRangeValue<D>>{begin: beginDate, end: endDate};\n          }\n      }\n    } else {\n      date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n      this._lastValueValid = !date || this._dateAdapter.isValid(date);\n      date = this._getValidDateOrNull(date);\n    }\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: SatDatepickerRangeValue<D> | D | null) {\n      if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {\n          value = value as SatDatepickerRangeValue<D>\n          this._elementRef.nativeElement.value =\n              value && value.begin && value.end\n                  ? this._dateAdapter.format(value.begin, this._dateFormats.display.dateInput) +\n                  ' - ' +\n                  this._dateAdapter.format(value.end, this._dateFormats.display.dateInput)\n                  : ''\n      }\n      else {\n            value = value as D | null\n          this._elementRef.nativeElement.value =\n              value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n      }\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {SatDatepicker} from './datepicker';\nimport {SatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class SatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'sat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: SatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(SatDatepickerToggleIcon) _customIcon: SatDatepickerToggleIcon;\n\n  constructor(public _intl: SatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {SatCalendar, SatCalendarHeader} from './calendar';\nimport {SatCalendarBody} from './calendar-body';\nimport {\n  SatDatepicker,\n  SatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {SatDatepickerInput} from './datepicker-input';\nimport {SatDatepickerIntl} from './datepicker-intl';\nimport {SatDatepickerToggle, SatDatepickerToggleIcon} from './datepicker-toggle';\nimport {SatMonthView} from './month-view';\nimport {SatMultiYearView} from './multi-year-view';\nimport {SatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    SatCalendar,\n    SatCalendarBody,\n    SatDatepicker,\n    SatDatepickerContent,\n    SatDatepickerInput,\n    SatDatepickerToggle,\n    SatDatepickerToggleIcon,\n    SatMonthView,\n    SatYearView,\n    SatMultiYearView,\n    SatCalendarHeader,\n  ],\n  declarations: [\n    SatCalendar,\n    SatCalendarBody,\n    SatDatepicker,\n    SatDatepickerContent,\n    SatDatepickerInput,\n    SatDatepickerToggle,\n    SatDatepickerToggleIcon,\n    SatMonthView,\n    SatYearView,\n    SatMultiYearView,\n    SatCalendarHeader,\n  ],\n  providers: [\n    SatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    SatDatepickerContent,\n    SatCalendarHeader,\n  ]\n})\nexport class SatDatepickerModule {}\n"]}