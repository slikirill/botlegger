(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/cdk/platform'), require('rxjs/operators'), require('@angular/cdk/keycodes'), require('@angular/cdk/bidi'), require('@angular/cdk/portal'), require('@angular/animations'), require('@angular/cdk/coercion'), require('@angular/cdk/overlay'), require('@angular/common'), require('@angular/material/core'), require('@angular/material/dialog'), require('@angular/forms'), require('@angular/material/form-field'), require('@angular/material/input'), require('@angular/cdk/a11y'), require('@angular/material/button')) :
  typeof define === 'function' && define.amd ? define('saturn-datepicker', ['exports', '@angular/core', 'rxjs', '@angular/cdk/platform', 'rxjs/operators', '@angular/cdk/keycodes', '@angular/cdk/bidi', '@angular/cdk/portal', '@angular/animations', '@angular/cdk/coercion', '@angular/cdk/overlay', '@angular/common', '@angular/material/core', '@angular/material/dialog', '@angular/forms', '@angular/material/form-field', '@angular/material/input', '@angular/cdk/a11y', '@angular/material/button'], factory) :
  (factory((global['saturn-datepicker'] = {}),global.ng.core,global.rxjs,global.ng.cdk.platform,global.rxjs.operators,global.ng.cdk.keycodes,global.ng.cdk.bidi,global.ng.cdk.portal,global.ng.animations,global.ng.cdk.coercion,global.ng.cdk.overlay,global.ng.common,global.ng.material.core,global.ng.material.dialog,global.ng.forms,global.ng.material['form-field'],global.ng.material.input,global.ng.cdk.a11y,global.ng.material.button));
}(this, (function (exports,i0,rxjs,platform,operators,keycodes,bidi,portal,animations,coercion,overlay,common,core,dialog,forms,formField,input,a11y,button) { 'use strict';

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /** *
   * InjectionToken for datepicker that can be used to override default locale code.
    @type {?} */
  var MAT_DATE_LOCALE = new i0.InjectionToken('MAT_DATE_LOCALE', {
      providedIn: 'root',
      factory: MAT_DATE_LOCALE_FACTORY,
  });
  /**
   * \@docs-private
   * @return {?}
   */
  function MAT_DATE_LOCALE_FACTORY() {
      return i0.inject(i0.LOCALE_ID);
  }
  /** *
   * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.
   * If you are importing and providing this in your code you can simply remove it.
   * @deprecated
   * \@breaking-change 7.0.0
    @type {?} */
  var MAT_DATE_LOCALE_PROVIDER = { provide: MAT_DATE_LOCALE, useExisting: i0.LOCALE_ID };
  /**
   * Adapts type `D` to be usable as a date by cdk-based components that work with dates.
   * @abstract
   * @template D
   */
  var /**
   * Adapts type `D` to be usable as a date by cdk-based components that work with dates.
   * @abstract
   * @template D
   */ DateAdapter = (function () {
      function DateAdapter() {
          this._localeChanges = new rxjs.Subject();
      }
      Object.defineProperty(DateAdapter.prototype, "localeChanges", {
          /** A stream that emits when the locale changes. */
          get: /**
           * A stream that emits when the locale changes.
           * @return {?}
           */ function () { return this._localeChanges; },
          enumerable: true,
          configurable: true
      });
      /**
       * Attempts to deserialize a value to a valid date object. This is different from parsing in that
       * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
       * string). The default implementation does not allow any deserialization, it simply checks that
       * the given value is already a valid date object or null. The `<sat-datepicker>` will call this
       * method on all of it's `@Input()` properties that accept dates. It is therefore possible to
       * support passing values from your backend directly to these properties by overriding this method
       * to also deserialize the format used by your backend.
       * @param value The value to be deserialized into a date object.
       * @returns The deserialized date object, either a valid date, null if the value can be
       *     deserialized into a null date (e.g. the empty string), or an invalid date.
       */
      /**
       * Attempts to deserialize a value to a valid date object. This is different from parsing in that
       * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
       * string). The default implementation does not allow any deserialization, it simply checks that
       * the given value is already a valid date object or null. The `<sat-datepicker>` will call this
       * method on all of it's `\@Input()` properties that accept dates. It is therefore possible to
       * support passing values from your backend directly to these properties by overriding this method
       * to also deserialize the format used by your backend.
       * @param {?} value The value to be deserialized into a date object.
       * @return {?} The deserialized date object, either a valid date, null if the value can be
       *     deserialized into a null date (e.g. the empty string), or an invalid date.
       */
      DateAdapter.prototype.deserialize = /**
       * Attempts to deserialize a value to a valid date object. This is different from parsing in that
       * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
       * string). The default implementation does not allow any deserialization, it simply checks that
       * the given value is already a valid date object or null. The `<sat-datepicker>` will call this
       * method on all of it's `\@Input()` properties that accept dates. It is therefore possible to
       * support passing values from your backend directly to these properties by overriding this method
       * to also deserialize the format used by your backend.
       * @param {?} value The value to be deserialized into a date object.
       * @return {?} The deserialized date object, either a valid date, null if the value can be
       *     deserialized into a null date (e.g. the empty string), or an invalid date.
       */
          function (value) {
              if (value == null || this.isDateInstance(value) && this.isValid(value)) {
                  return value;
              }
              return this.invalid();
          };
      /**
       * Sets the locale used for all dates.
       * @param locale The new locale.
       */
      /**
       * Sets the locale used for all dates.
       * @param {?} locale The new locale.
       * @return {?}
       */
      DateAdapter.prototype.setLocale = /**
       * Sets the locale used for all dates.
       * @param {?} locale The new locale.
       * @return {?}
       */
          function (locale) {
              this.locale = locale;
              this._localeChanges.next();
          };
      /**
       * Compares two dates.
       * @param first The first date to compare.
       * @param second The second date to compare.
       * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,
       *     a number greater than 0 if the first date is later.
       */
      /**
       * Compares two dates.
       * @param {?} first The first date to compare.
       * @param {?} second The second date to compare.
       * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,
       *     a number greater than 0 if the first date is later.
       */
      DateAdapter.prototype.compareDate = /**
       * Compares two dates.
       * @param {?} first The first date to compare.
       * @param {?} second The second date to compare.
       * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,
       *     a number greater than 0 if the first date is later.
       */
          function (first, second) {
              return this.getYear(first) - this.getYear(second) ||
                  this.getMonth(first) - this.getMonth(second) ||
                  this.getDate(first) - this.getDate(second);
          };
      /**
       * Checks if two dates are equal.
       * @param first The first date to check.
       * @param second The second date to check.
       * @returns Whether the two dates are equal.
       *     Null dates are considered equal to other null dates.
       */
      /**
       * Checks if two dates are equal.
       * @param {?} first The first date to check.
       * @param {?} second The second date to check.
       * @return {?} Whether the two dates are equal.
       *     Null dates are considered equal to other null dates.
       */
      DateAdapter.prototype.sameDate = /**
       * Checks if two dates are equal.
       * @param {?} first The first date to check.
       * @param {?} second The second date to check.
       * @return {?} Whether the two dates are equal.
       *     Null dates are considered equal to other null dates.
       */
          function (first, second) {
              if (first && second) {
                  /** @type {?} */
                  var firstValid = this.isValid(first);
                  /** @type {?} */
                  var secondValid = this.isValid(second);
                  if (firstValid && secondValid) {
                      return !this.compareDate(first, second);
                  }
                  return firstValid == secondValid;
              }
              return first == second;
          };
      /**
       * Clamp the given date between min and max dates.
       * @param date The date to clamp.
       * @param min The minimum value to allow. If null or omitted no min is enforced.
       * @param max The maximum value to allow. If null or omitted no max is enforced.
       * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,
       *     otherwise `date`.
       */
      /**
       * Clamp the given date between min and max dates.
       * @param {?} date The date to clamp.
       * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.
       * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.
       * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,
       *     otherwise `date`.
       */
      DateAdapter.prototype.clampDate = /**
       * Clamp the given date between min and max dates.
       * @param {?} date The date to clamp.
       * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.
       * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.
       * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,
       *     otherwise `date`.
       */
          function (date, min, max) {
              if (min && this.compareDate(date, min) < 0) {
                  return min;
              }
              if (max && this.compareDate(date, max) > 0) {
                  return max;
              }
              return date;
          };
      return DateAdapter;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /** @type {?} */
  var MAT_DATE_FORMATS = new i0.InjectionToken('mat-date-formats');

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */
  /* global Reflect, Promise */
  var extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b)
          if (b.hasOwnProperty(p))
              d[p] = b[p]; };
  function __extends(d, b) {
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                  t[p] = s[p];
      }
      return t;
  };

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /** *
   * Whether the browser supports the Intl API.
    @type {?} */
  var SUPPORTS_INTL_API = typeof Intl != 'undefined';
  /** *
   * The default month names to use if Intl API is not available.
    @type {?} */
  var DEFAULT_MONTH_NAMES = {
      'long': [
          'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',
          'October', 'November', 'December'
      ],
      'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
  };
  var ɵ0 = function (i) { return String(i + 1); };
  /** *
   * The default date names to use if Intl API is not available.
    @type {?} */
  var DEFAULT_DATE_NAMES = range(31, ɵ0);
  /** *
   * The default day of the week names to use if Intl API is not available.
    @type {?} */
  var DEFAULT_DAY_OF_WEEK_NAMES = {
      'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
      'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']
  };
  /** *
   * First day of week according locale.
   * Taken form moment.js source code https://github.com/moment/moment/tree/develop/src/locale
    @type {?} */
  var FIRST_DAY_OF_WEEK = {
      af: 1, ar: 6, 'ar-ly': 6, 'ar-ma': 6, 'ar-tn': 1, az: 1, be: 1, bg: 1, bm: 1, br: 1, bs: 1, ca: 1, cs: 1, cv: 1,
      cy: 1, da: 1, de: 1, 'de-at': 1, 'de-ch': 1, el: 1, 'en-au': 1, 'en-gb': 1, 'en-ie': 1, 'en-nz': 1, eo: 1,
      es: 1, 'es-do': 1, et: 1, eu: 1, fa: 6, fi: 1, fo: 1, fr: 1, 'fr-ch': 1, fy: 1, gd: 1, gl: 1, 'gom-latn': 1,
      hr: 1, hu: 1, 'hy-am': 1, id: 1, is: 1, it: 1, jv: 1, ka: 1, kk: 1, km: 1, ky: 1, lb: 1, lt: 1, lv: 1, me: 1,
      mi: 1, mk: 1, ms: 1, 'ms-my': 1, mt: 1, my: 1, nb: 1, nl: 1, 'nl-be': 1, nn: 1, pl: 1, pt: 1, 'pt-BR': 0, ro: 1, ru: 1,
      sd: 1, se: 1, sk: 1, sl: 1, sq: 1, sr: 1, 'sr-cyrl': 1, ss: 1, sv: 1, sw: 1, 'tet': 1, tg: 1, 'tl-ph': 1,
      'tlh': 1, tr: 1, 'tzl': 1, 'tzm': 6, 'tzm-latn': 6, 'ug-cn': 1, uk: 1, ur: 1, uz: 1, 'uz-latn': 1, vi: 1,
      'x-pseudo': 1, yo: 1, 'zh-cn': 1,
  };
  /** *
   * Matches strings that have the form of a valid RFC 3339 string
   * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date
   * because the regex will match strings an with out of bounds month, date, etc.
    @type {?} */
  var ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
  /**
   * Creates an array and fills it with values.
   * @template T
   * @param {?} length
   * @param {?} valueFunction
   * @return {?}
   */
  function range(length, valueFunction) {
      /** @type {?} */
      var valuesArray = Array(length);
      for (var i = 0; i < length; i++) {
          valuesArray[i] = valueFunction(i);
      }
      return valuesArray;
  }
  /**
   * Adapts the native JS Date for use with cdk-based components that work with dates.
   */
  var NativeDateAdapter = (function (_super) {
      __extends(NativeDateAdapter, _super);
      function NativeDateAdapter(matDateLocale, platform$$1) {
          var _this = _super.call(this) || this;
          /**
           * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
           * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
           * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
           * will produce `'8/13/1800'`.
           *
           * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now
           * getting the string representation of a Date object from it's utc representation. We're keeping
           * it here for sometime, just for precaution, in case we decide to revert some of these changes
           * though.
           */
          _this.useUtcForDisplay = true;
          _super.prototype.setLocale.call(_this, matDateLocale);
          // IE does its own time zone correction, so we disable this on IE.
          // IE does its own time zone correction, so we disable this on IE.
          _this.useUtcForDisplay = !platform$$1.TRIDENT;
          _this._clampDate = platform$$1.TRIDENT || platform$$1.EDGE;
          return _this;
      }
      /**
       * @param {?} date
       * @return {?}
       */
      NativeDateAdapter.prototype.getYear = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return date.getFullYear();
          };
      /**
       * @param {?} date
       * @return {?}
       */
      NativeDateAdapter.prototype.getMonth = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return date.getMonth();
          };
      /**
       * @param {?} date
       * @return {?}
       */
      NativeDateAdapter.prototype.getDate = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return date.getDate();
          };
      /**
       * @param {?} date
       * @return {?}
       */
      NativeDateAdapter.prototype.getDayOfWeek = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return date.getDay();
          };
      /**
       * @param {?} style
       * @return {?}
       */
      NativeDateAdapter.prototype.getMonthNames = /**
       * @param {?} style
       * @return {?}
       */
          function (style) {
              var _this = this;
              if (SUPPORTS_INTL_API) {
                  /** @type {?} */
                  var dtf_1 = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });
                  return range(12, function (i) {
                      return _this._stripDirectionalityCharacters(_this._format(dtf_1, new Date(2017, i, 1)));
                  });
              }
              return DEFAULT_MONTH_NAMES[style];
          };
      /**
       * @return {?}
       */
      NativeDateAdapter.prototype.getDateNames = /**
       * @return {?}
       */
          function () {
              var _this = this;
              if (SUPPORTS_INTL_API) {
                  /** @type {?} */
                  var dtf_2 = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });
                  return range(31, function (i) { return _this._stripDirectionalityCharacters(_this._format(dtf_2, new Date(2017, 0, i + 1))); });
              }
              return DEFAULT_DATE_NAMES;
          };
      /**
       * @param {?} style
       * @return {?}
       */
      NativeDateAdapter.prototype.getDayOfWeekNames = /**
       * @param {?} style
       * @return {?}
       */
          function (style) {
              var _this = this;
              if (SUPPORTS_INTL_API) {
                  /** @type {?} */
                  var dtf_3 = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });
                  return range(7, function (i) { return _this._stripDirectionalityCharacters(_this._format(dtf_3, new Date(2017, 0, i + 1))); });
              }
              return DEFAULT_DAY_OF_WEEK_NAMES[style];
          };
      /**
       * @param {?} date
       * @return {?}
       */
      NativeDateAdapter.prototype.getYearName = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              if (SUPPORTS_INTL_API) {
                  /** @type {?} */
                  var dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });
                  return this._stripDirectionalityCharacters(this._format(dtf, date));
              }
              return String(this.getYear(date));
          };
      /**
       * @return {?}
       */
      NativeDateAdapter.prototype.getFirstDayOfWeek = /**
       * @return {?}
       */
          function () {
              /** @type {?} */
              var locale = this.locale.toLowerCase();
              return FIRST_DAY_OF_WEEK[locale] || FIRST_DAY_OF_WEEK[locale.substr(0, 2)] || 0;
          };
      /**
       * @param {?} date
       * @return {?}
       */
      NativeDateAdapter.prototype.getNumDaysInMonth = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
          };
      /**
       * @param {?} date
       * @return {?}
       */
      NativeDateAdapter.prototype.clone = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));
          };
      /**
       * @param {?} year
       * @param {?} month
       * @param {?} date
       * @return {?}
       */
      NativeDateAdapter.prototype.createDate = /**
       * @param {?} year
       * @param {?} month
       * @param {?} date
       * @return {?}
       */
          function (year, month, date) {
              // Check for invalid month and date (except upper bound on date which we have to check after
              // creating the Date).
              if (month < 0 || month > 11) {
                  throw Error("Invalid month index \"" + month + "\". Month index has to be between 0 and 11.");
              }
              if (date < 1) {
                  throw Error("Invalid date \"" + date + "\". Date has to be greater than 0.");
              }
              /** @type {?} */
              var result = this._createDateWithOverflow(year, month, date);
              // Check that the date wasn't above the upper bound for the month, causing the month to overflow
              if (result.getMonth() != month) {
                  throw Error("Invalid date \"" + date + "\" for month with index \"" + month + "\".");
              }
              return result;
          };
      /**
       * @return {?}
       */
      NativeDateAdapter.prototype.today = /**
       * @return {?}
       */
          function () {
              return new Date();
          };
      /**
       * @param {?} value
       * @return {?}
       */
      NativeDateAdapter.prototype.parse = /**
       * @param {?} value
       * @return {?}
       */
          function (value) {
              // We have no way using the native JS Date to set the parse format or locale, so we ignore these
              // parameters.
              if (typeof value == 'number') {
                  return new Date(value);
              }
              return value ? new Date(Date.parse(value)) : null;
          };
      /**
       * @param {?} date
       * @param {?} displayFormat
       * @return {?}
       */
      NativeDateAdapter.prototype.format = /**
       * @param {?} date
       * @param {?} displayFormat
       * @return {?}
       */
          function (date, displayFormat) {
              if (!this.isValid(date)) {
                  throw Error('NativeDateAdapter: Cannot format invalid date.');
              }
              if (SUPPORTS_INTL_API) {
                  // On IE and Edge the i18n API will throw a hard error that can crash the entire app
                  // if we attempt to format a date whose year is less than 1 or greater than 9999.
                  if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {
                      date = this.clone(date);
                      date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));
                  }
                  displayFormat = __assign({}, displayFormat, { timeZone: 'utc' });
                  /** @type {?} */
                  var dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
                  return this._stripDirectionalityCharacters(this._format(dtf, date));
              }
              return this._stripDirectionalityCharacters(date.toDateString());
          };
      /**
       * @param {?} date
       * @param {?} years
       * @return {?}
       */
      NativeDateAdapter.prototype.addCalendarYears = /**
       * @param {?} date
       * @param {?} years
       * @return {?}
       */
          function (date, years) {
              return this.addCalendarMonths(date, years * 12);
          };
      /**
       * @param {?} date
       * @param {?} months
       * @return {?}
       */
      NativeDateAdapter.prototype.addCalendarMonths = /**
       * @param {?} date
       * @param {?} months
       * @return {?}
       */
          function (date, months) {
              /** @type {?} */
              var newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));
              // It's possible to wind up in the wrong month if the original month has more days than the new
              // month. In this case we want to go to the last day of the desired month.
              // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
              // guarantee this.
              if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {
                  newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
              }
              return newDate;
          };
      /**
       * @param {?} date
       * @param {?} days
       * @return {?}
       */
      NativeDateAdapter.prototype.addCalendarDays = /**
       * @param {?} date
       * @param {?} days
       * @return {?}
       */
          function (date, days) {
              return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
          };
      /**
       * @param {?} date
       * @return {?}
       */
      NativeDateAdapter.prototype.toIso8601 = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return [
                  date.getUTCFullYear(),
                  this._2digit(date.getUTCMonth() + 1),
                  this._2digit(date.getUTCDate())
              ].join('-');
          };
      /**
       * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
       * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
       * invalid date for all other values.
       */
      /**
       * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
       * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
       * invalid date for all other values.
       * @param {?} value
       * @return {?}
       */
      NativeDateAdapter.prototype.deserialize = /**
       * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
       * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
       * invalid date for all other values.
       * @param {?} value
       * @return {?}
       */
          function (value) {
              if (typeof value === 'string') {
                  if (!value) {
                      return null;
                  }
                  // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the
                  // string is the right format first.
                  if (ISO_8601_REGEX.test(value)) {
                      /** @type {?} */
                      var date = new Date(value);
                      if (this.isValid(date)) {
                          return date;
                      }
                  }
              }
              return _super.prototype.deserialize.call(this, value);
          };
      /**
       * @param {?} obj
       * @return {?}
       */
      NativeDateAdapter.prototype.isDateInstance = /**
       * @param {?} obj
       * @return {?}
       */
          function (obj) {
              return obj instanceof Date;
          };
      /**
       * @param {?} date
       * @return {?}
       */
      NativeDateAdapter.prototype.isValid = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return !isNaN(date.getTime());
          };
      /**
       * @return {?}
       */
      NativeDateAdapter.prototype.invalid = /**
       * @return {?}
       */
          function () {
              return new Date(NaN);
          };
      /**
       * Creates a date but allows the month and date to overflow.
       * @param {?} year
       * @param {?} month
       * @param {?} date
       * @return {?}
       */
      NativeDateAdapter.prototype._createDateWithOverflow = /**
       * Creates a date but allows the month and date to overflow.
       * @param {?} year
       * @param {?} month
       * @param {?} date
       * @return {?}
       */
          function (year, month, date) {
              /** @type {?} */
              var result = new Date(year, month, date);
              // We need to correct for the fact that JS native Date treats years in range [0, 99] as
              // abbreviations for 19xx.
              if (year >= 0 && year < 100) {
                  result.setFullYear(this.getYear(result) - 1900);
              }
              return result;
          };
      /**
       * Pads a number to make it two digits.
       * @param {?} n The number to pad.
       * @return {?} The padded number.
       */
      NativeDateAdapter.prototype._2digit = /**
       * Pads a number to make it two digits.
       * @param {?} n The number to pad.
       * @return {?} The padded number.
       */
          function (n) {
              return ('00' + n).slice(-2);
          };
      /**
       * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
       * other browsers do not. We remove them to make output consistent and because they interfere with
       * date parsing.
       * @param {?} str The string to strip direction characters from.
       * @return {?} The stripped string.
       */
      NativeDateAdapter.prototype._stripDirectionalityCharacters = /**
       * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
       * other browsers do not. We remove them to make output consistent and because they interfere with
       * date parsing.
       * @param {?} str The string to strip direction characters from.
       * @return {?} The stripped string.
       */
          function (str) {
              return str.replace(/[\u200e\u200f]/g, '');
          };
      /**
       * When converting Date object to string, javascript built-in functions may return wrong
       * results because it applies its internal DST rules. The DST rules around the world change
       * very frequently, and the current valid rule is not always valid in previous years though.
       * We work around this problem building a new Date object which has its internal UTC
       * representation with the local date and time.
       * @param {?} dtf Intl.DateTimeFormat object, containg the desired string format. It must have
       *    timeZone set to 'utc' to work fine.
       * @param {?} date Date from which we want to get the string representation according to dtf
       * @return {?} A Date object with its UTC representation based on the passed in date info
       */
      NativeDateAdapter.prototype._format = /**
       * When converting Date object to string, javascript built-in functions may return wrong
       * results because it applies its internal DST rules. The DST rules around the world change
       * very frequently, and the current valid rule is not always valid in previous years though.
       * We work around this problem building a new Date object which has its internal UTC
       * representation with the local date and time.
       * @param {?} dtf Intl.DateTimeFormat object, containg the desired string format. It must have
       *    timeZone set to 'utc' to work fine.
       * @param {?} date Date from which we want to get the string representation according to dtf
       * @return {?} A Date object with its UTC representation based on the passed in date info
       */
          function (dtf, date) {
              /** @type {?} */
              var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
              return dtf.format(d);
          };
      NativeDateAdapter.decorators = [
          { type: i0.Injectable }
      ];
      /** @nocollapse */
      NativeDateAdapter.ctorParameters = function () {
          return [
              { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_LOCALE,] }] },
              { type: platform.Platform }
          ];
      };
      return NativeDateAdapter;
  }(DateAdapter));

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /** @type {?} */
  var MAT_NATIVE_DATE_FORMATS = {
      parse: {
          dateInput: null,
      },
      display: {
          dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },
          monthYearLabel: { year: 'numeric', month: 'short' },
          dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
          monthYearA11yLabel: { year: 'numeric', month: 'long' },
      }
  };

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  var NativeDateModule = (function () {
      function NativeDateModule() {
      }
      NativeDateModule.decorators = [
          { type: i0.NgModule, args: [{
                      imports: [platform.PlatformModule],
                      providers: [
                          { provide: DateAdapter, useClass: NativeDateAdapter },
                      ],
                  },] }
      ];
      return NativeDateModule;
  }());
  var ɵ0$1 = MAT_NATIVE_DATE_FORMATS;
  var SatNativeDateModule = (function () {
      function SatNativeDateModule() {
      }
      SatNativeDateModule.decorators = [
          { type: i0.NgModule, args: [{
                      imports: [NativeDateModule],
                      providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0$1 }],
                  },] }
      ];
      return SatNativeDateModule;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * \@docs-private
   * @param {?} provider
   * @return {?}
   */
  function createMissingDateImplError(provider) {
      return Error("SatDatepicker: No provider found for " + provider + ". You must import one of the following " +
          "modules at your application root: SatNativeDateModule, MatMomentDateModule, or provide a " +
          "custom implementation.");
  }

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /**
   * Datepicker data that requires internationalization.
   */
  var SatDatepickerIntl = (function () {
      function SatDatepickerIntl() {
          /**
           * Stream that emits whenever the labels here are changed. Use this to notify
           * components if the labels have changed after initialization.
           */
          this.changes = new rxjs.Subject();
          /**
           * A label for the calendar popup (used by screen readers).
           */
          this.calendarLabel = 'Calendar';
          /**
           * A label for the button used to open the calendar popup (used by screen readers).
           */
          this.openCalendarLabel = 'Open calendar';
          /**
           * A label for the previous month button (used by screen readers).
           */
          this.prevMonthLabel = 'Previous month';
          /**
           * A label for the next month button (used by screen readers).
           */
          this.nextMonthLabel = 'Next month';
          /**
           * A label for the previous year button (used by screen readers).
           */
          this.prevYearLabel = 'Previous year';
          /**
           * A label for the next year button (used by screen readers).
           */
          this.nextYearLabel = 'Next year';
          /**
           * A label for the previous multi-year button (used by screen readers).
           */
          this.prevMultiYearLabel = 'Previous 20 years';
          /**
           * A label for the next multi-year button (used by screen readers).
           */
          this.nextMultiYearLabel = 'Next 20 years';
          /**
           * A label for the 'switch to month view' button (used by screen readers).
           */
          this.switchToMonthViewLabel = 'Choose date';
          /**
           * A label for the 'switch to year view' button (used by screen readers).
           */
          this.switchToMultiYearViewLabel = 'Choose month and year';
      }
      SatDatepickerIntl.decorators = [
          { type: i0.Injectable, args: [{ providedIn: 'root' },] }
      ];
      /** @nocollapse */ SatDatepickerIntl.ngInjectableDef = i0.defineInjectable({ factory: function SatDatepickerIntl_Factory() { return new SatDatepickerIntl(); }, token: SatDatepickerIntl, providedIn: "root" });
      return SatDatepickerIntl;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /**
   * An internal class that represents the data corresponding to a single calendar cell.
   * \@docs-private
   */
  var /**
   * An internal class that represents the data corresponding to a single calendar cell.
   * \@docs-private
   */ SatCalendarCell = (function () {
      function SatCalendarCell(value, displayValue, ariaLabel, enabled) {
          this.value = value;
          this.displayValue = displayValue;
          this.ariaLabel = ariaLabel;
          this.enabled = enabled;
      }
      return SatCalendarCell;
  }());
  /**
   * An internal component used to display calendar data in a table.
   * \@docs-private
   */
  var SatCalendarBody = (function () {
      function SatCalendarBody(_elementRef, _ngZone) {
          this._elementRef = _elementRef;
          this._ngZone = _ngZone;
          /**
           * Whether to use date range selection behaviour.
           */
          this.rangeMode = false;
          /**
           * The number of columns in the table.
           */
          this.numCols = 7;
          /**
           * Whether to allow selection of disabled cells.
           */
          this.allowDisabledSelection = false;
          /**
           * The cell number of the active cell in the table.
           */
          this.activeCell = 0;
          /**
           * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be
           * maintained even as the table resizes.
           */
          this.cellAspectRatio = 1;
          /**
           * Emits when a new value is selected.
           */
          this.selectedValueChange = new i0.EventEmitter();
      }
      /**
       * @param {?} cell
       * @return {?}
       */
      SatCalendarBody.prototype._cellClicked = /**
       * @param {?} cell
       * @return {?}
       */
          function (cell) {
              if (!this.allowDisabledSelection && !cell.enabled) {
                  return;
              }
              this.selectedValueChange.emit(cell.value);
          };
      Object.defineProperty(SatCalendarBody.prototype, "_firstRowOffset", {
          /** The number of blank cells to put at the beginning for the first row. */
          get: /**
           * The number of blank cells to put at the beginning for the first row.
           * @return {?}
           */ function () {
              return this.rows && this.rows.length && this.rows[0].length ?
                  this.numCols - this.rows[0].length : 0;
          },
          enumerable: true,
          configurable: true
      });
      /**
       * @param {?} rowIndex
       * @param {?} colIndex
       * @return {?}
       */
      SatCalendarBody.prototype._isActiveCell = /**
       * @param {?} rowIndex
       * @param {?} colIndex
       * @return {?}
       */
          function (rowIndex, colIndex) {
              /** @type {?} */
              var cellNumber = rowIndex * this.numCols + colIndex;
              // Account for the fact that the first row may not have as many cells.
              if (rowIndex) {
                  cellNumber -= this._firstRowOffset;
              }
              return cellNumber == this.activeCell;
          };
      /** Whenever to mark cell as semi-selected (inside dates interval). */
      /**
       * Whenever to mark cell as semi-selected (inside dates interval).
       * @param {?} date
       * @return {?}
       */
      SatCalendarBody.prototype._isSemiSelected = /**
       * Whenever to mark cell as semi-selected (inside dates interval).
       * @param {?} date
       * @return {?}
       */
          function (date) {
              if (!this.rangeMode) {
                  return false;
              }
              if (this.rangeFull) {
                  return true;
              }
              /** Do not mark start and end of interval. */
              if (date === this.begin || date === this.end) {
                  return false;
              }
              if (this.begin && !this.end) {
                  return date > this.begin;
              }
              if (this.end && !this.begin) {
                  return date < this.end;
              }
              return date > /** @type {?} */ (this.begin) && date < /** @type {?} */ (this.end);
          };
      /** Focuses the active cell after the microtask queue is empty. */
      /**
       * Focuses the active cell after the microtask queue is empty.
       * @return {?}
       */
      SatCalendarBody.prototype._focusActiveCell = /**
       * Focuses the active cell after the microtask queue is empty.
       * @return {?}
       */
          function () {
              var _this = this;
              this._ngZone.runOutsideAngular(function () {
                  _this._ngZone.onStable.asObservable().pipe(operators.take(1)).subscribe(function () {
                      _this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();
                  });
              });
          };
      SatCalendarBody.decorators = [
          { type: i0.Component, args: [{
                      moduleId: module.id,
                      selector: '[sat-calendar-body]',
                      template: "<!--\n  If there's not enough space in the first row, create a separate label row. We mark this row as\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\n-->\n<tr *ngIf=\"_firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\">\n  <td class=\"mat-calendar-body-label\"\n      [attr.colspan]=\"numCols\"\n      [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\"\n      [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">\n    {{label}}\n  </td>\n</tr>\n\n<!-- Create the first row separately so we can include a special spacer cell. -->\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\n  <!--\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\n    The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\n    percentage of the width (a variant of the trick described here:\n    https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\n  -->\n  <td *ngIf=\"rowIndex === 0 && _firstRowOffset\"\n      aria-hidden=\"true\"\n      class=\"mat-calendar-body-label\"\n      [attr.colspan]=\"_firstRowOffset\"\n      [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\"\n      [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">\n    {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\n  </td>\n  <td *ngFor=\"let item of row; let colIndex = index\"\n      role=\"gridcell\"\n      class=\"mat-calendar-body-cell\"\n      [tabindex]=\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\"\n      [class.mat-calendar-body-disabled]=\"!item.enabled\"\n      [class.mat-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\n      [class.mat-calendar-body-begin-range]=\"begin === item.value\"\n      [class.mat-calendar-body-end-range]=\"end === item.value\"\n      [class.mat-calendar-cell-semi-selected]=\"_isSemiSelected(item.value)\"\n      [attr.aria-label]=\"item.ariaLabel\"\n      [attr.aria-disabled]=\"!item.enabled || null\"\n      [attr.aria-selected]=\"selectedValue === item.value\"\n      (click)=\"_cellClicked(item)\"\n      [style.width.%]=\"100 / numCols\"\n      [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\"\n      [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">\n    <div class=\"mat-calendar-body-cell-content\"\n         [class.mat-calendar-body-selected]=\"begin === item.value || end === item.value || selectedValue === item.value\"\n         [class.mat-calendar-body-semi-selected]=\"_isSemiSelected(item.value)\"\n         [class.mat-calendar-body-today]=\"todayValue === item.value\">\n      {{item.displayValue}}\n    </div>\n  </td>\n</tr>\n",
                      host: {
                          'class': 'mat-calendar-body',
                          'role': 'grid',
                          'attr.aria-readonly': 'true'
                      },
                      exportAs: 'matCalendarBody',
                      encapsulation: i0.ViewEncapsulation.None,
                      changeDetection: i0.ChangeDetectionStrategy.OnPush,
                      styles: [".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}[dir=rtl] .mat-calendar-body-label{text-align:right}"]
                  }] }
      ];
      /** @nocollapse */
      SatCalendarBody.ctorParameters = function () {
          return [
              { type: i0.ElementRef },
              { type: i0.NgZone }
          ];
      };
      SatCalendarBody.propDecorators = {
          label: [{ type: i0.Input }],
          rows: [{ type: i0.Input }],
          todayValue: [{ type: i0.Input }],
          selectedValue: [{ type: i0.Input }],
          begin: [{ type: i0.Input }],
          end: [{ type: i0.Input }],
          rangeFull: [{ type: i0.Input }],
          rangeMode: [{ type: i0.Input }],
          labelMinRequiredCells: [{ type: i0.Input }],
          numCols: [{ type: i0.Input }],
          allowDisabledSelection: [{ type: i0.Input }],
          activeCell: [{ type: i0.Input }],
          cellAspectRatio: [{ type: i0.Input }],
          selectedValueChange: [{ type: i0.Output }]
      };
      return SatCalendarBody;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /** @type {?} */
  var DAYS_PER_WEEK = 7;
  /**
   * An internal component used to display a single month in the datepicker.
   * \@docs-private
   * @template D
   */
  var SatMonthView = (function () {
      function SatMonthView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {
          this._changeDetectorRef = _changeDetectorRef;
          this._dateFormats = _dateFormats;
          this._dateAdapter = _dateAdapter;
          this._dir = _dir;
          /**
           * Allow selecting range of dates.
           */
          this.rangeMode = false;
          /**
           * Whenever full month is inside dates interval.
           */
          this._rangeFull = false;
          /**
           * Whenever user already selected start of dates interval.
           */
          this._beginDateSelected = false;
          /**
           * Emits when a new date is selected.
           */
          this.selectedChange = new i0.EventEmitter();
          /**
           * Emits when any date is selected.
           */
          this._userSelection = new i0.EventEmitter();
          /**
           * Emits when any date is activated.
           */
          this.activeDateChange = new i0.EventEmitter();
          if (!this._dateAdapter) {
              throw createMissingDateImplError('DateAdapter');
          }
          if (!this._dateFormats) {
              throw createMissingDateImplError('MAT_DATE_FORMATS');
          }
          /** @type {?} */
          var firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();
          /** @type {?} */
          var narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');
          /** @type {?} */
          var longWeekdays = this._dateAdapter.getDayOfWeekNames('long');
          /** @type {?} */
          var weekdays = longWeekdays.map(function (long, i) {
              return { long: long, narrow: narrowWeekdays[i] };
          });
          this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
          this._activeDate = this._dateAdapter.today();
      }
      Object.defineProperty(SatMonthView.prototype, "beginDate", {
          /** Current start of interval. */
          get: /**
           * Current start of interval.
           * @return {?}
           */ function () { return this._beginDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
              this.updateRangeSpecificValues();
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatMonthView.prototype, "endDate", {
          /** Current end of interval. */
          get: /**
           * Current end of interval.
           * @return {?}
           */ function () { return this._endDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
              this.updateRangeSpecificValues();
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatMonthView.prototype, "activeDate", {
          /**
           * The date to display in this month view (everything other than the month and year is ignored).
           */
          get: /**
           * The date to display in this month view (everything other than the month and year is ignored).
           * @return {?}
           */ function () { return this._activeDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              /** @type {?} */
              var oldActiveDate = this._activeDate;
              /** @type {?} */
              var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
              this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
              if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
                  this._init();
              }
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatMonthView.prototype, "selected", {
          /** The currently selected date. */
          get: /**
           * The currently selected date.
           * @return {?}
           */ function () { return this._selected; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
              this._selectedDate = this._getDateInCurrentMonth(this._selected);
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatMonthView.prototype, "minDate", {
          /** The minimum selectable date. */
          get: /**
           * The minimum selectable date.
           * @return {?}
           */ function () { return this._minDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatMonthView.prototype, "maxDate", {
          /** The maximum selectable date. */
          get: /**
           * The maximum selectable date.
           * @return {?}
           */ function () { return this._maxDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      /**
       * @return {?}
       */
      SatMonthView.prototype.ngAfterContentInit = /**
       * @return {?}
       */
          function () {
              this._init();
          };
      /** Handles when a new date is selected. */
      /**
       * Handles when a new date is selected.
       * @param {?} date
       * @return {?}
       */
      SatMonthView.prototype._dateSelected = /**
       * Handles when a new date is selected.
       * @param {?} date
       * @return {?}
       */
          function (date) {
              if (this.rangeMode) {
                  /** @type {?} */
                  var selectedYear = this._dateAdapter.getYear(this.activeDate);
                  /** @type {?} */
                  var selectedMonth = this._dateAdapter.getMonth(this.activeDate);
                  /** @type {?} */
                  var selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);
                  if (!this._beginDateSelected) {
                      // At first click emit the same start and end of interval
                      this._beginDateSelected = true;
                      this.selectedChange.emit(selectedDate);
                  }
                  else {
                      this._beginDateSelected = false;
                      this.selectedChange.emit(selectedDate);
                      this._userSelection.emit();
                  }
              }
              else if (this._selectedDate != date) {
                  /** @type {?} */
                  var selectedYear = this._dateAdapter.getYear(this.activeDate);
                  /** @type {?} */
                  var selectedMonth = this._dateAdapter.getMonth(this.activeDate);
                  /** @type {?} */
                  var selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);
                  this.selectedChange.emit(selectedDate);
                  this._userSelection.emit();
              }
          };
      /** Handles keydown events on the calendar body when calendar is in month view. */
      /**
       * Handles keydown events on the calendar body when calendar is in month view.
       * @param {?} event
       * @return {?}
       */
      SatMonthView.prototype._handleCalendarBodyKeydown = /**
       * Handles keydown events on the calendar body when calendar is in month view.
       * @param {?} event
       * @return {?}
       */
          function (event) {
              /** @type {?} */
              var oldActiveDate = this._activeDate;
              /** @type {?} */
              var isRtl = this._isRtl();
              switch (event.keyCode) {
                  case keycodes.LEFT_ARROW:
                      this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);
                      break;
                  case keycodes.RIGHT_ARROW:
                      this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);
                      break;
                  case keycodes.UP_ARROW:
                      this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);
                      break;
                  case keycodes.DOWN_ARROW:
                      this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);
                      break;
                  case keycodes.HOME:
                      this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));
                      break;
                  case keycodes.END:
                      this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -
                          this._dateAdapter.getDate(this._activeDate)));
                      break;
                  case keycodes.PAGE_UP:
                      this.activeDate = event.altKey ?
                          this._dateAdapter.addCalendarYears(this._activeDate, -1) :
                          this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                      break;
                  case keycodes.PAGE_DOWN:
                      this.activeDate = event.altKey ?
                          this._dateAdapter.addCalendarYears(this._activeDate, 1) :
                          this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                      break;
                  case keycodes.ENTER:
                      if (!this.dateFilter || this.dateFilter(this._activeDate)) {
                          this._dateSelected(this._dateAdapter.getDate(this._activeDate));
                          this._userSelection.emit();
                          // Prevent unexpected default actions such as form submission.
                          event.preventDefault();
                      }
                      return;
                  default:
                      // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                      return;
              }
              if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
                  this.activeDateChange.emit(this.activeDate);
              }
              this._focusActiveCell();
              // Prevent unexpected default actions such as form submission.
              event.preventDefault();
          };
      /** Initializes this month view. */
      /**
       * Initializes this month view.
       * @return {?}
       */
      SatMonthView.prototype._init = /**
       * Initializes this month view.
       * @return {?}
       */
          function () {
              this.updateRangeSpecificValues();
              this._selectedDate = this._getDateInCurrentMonth(this.selected);
              this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());
              this._monthLabel =
                  this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]
                      .toLocaleUpperCase();
              /** @type {?} */
              var firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
              this._firstWeekOffset =
                  (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -
                      this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;
              this._createWeekCells();
              this._changeDetectorRef.markForCheck();
          };
      /** Focuses the active cell after the microtask queue is empty. */
      /**
       * Focuses the active cell after the microtask queue is empty.
       * @return {?}
       */
      SatMonthView.prototype._focusActiveCell = /**
       * Focuses the active cell after the microtask queue is empty.
       * @return {?}
       */
          function () {
              this._matCalendarBody._focusActiveCell();
          };
      /**
       * Creates SatCalendarCells for the dates in this month.
       * @return {?}
       */
      SatMonthView.prototype._createWeekCells = /**
       * Creates SatCalendarCells for the dates in this month.
       * @return {?}
       */
          function () {
              /** @type {?} */
              var daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);
              /** @type {?} */
              var dateNames = this._dateAdapter.getDateNames();
              this._weeks = [[]];
              for (var i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {
                  if (cell == DAYS_PER_WEEK) {
                      this._weeks.push([]);
                      cell = 0;
                  }
                  /** @type {?} */
                  var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);
                  /** @type {?} */
                  var enabled = this._shouldEnableDate(date);
                  /** @type {?} */
                  var ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);
                  this._weeks[this._weeks.length - 1]
                      .push(new SatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));
              }
          };
      /**
       * Date filter for the month
       * @param {?} date
       * @return {?}
       */
      SatMonthView.prototype._shouldEnableDate = /**
       * Date filter for the month
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return !!date &&
                  (!this.dateFilter || this.dateFilter(date)) &&
                  (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&
                  (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);
          };
      /**
       * Gets the date in this month that the given Date falls on.
       * Returns null if the given Date is in another month.
       * @param {?} date
       * @return {?}
       */
      SatMonthView.prototype._getDateInCurrentMonth = /**
       * Gets the date in this month that the given Date falls on.
       * Returns null if the given Date is in another month.
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return date && this._hasSameMonthAndYear(date, this.activeDate) ?
                  this._dateAdapter.getDate(date) : null;
          };
      /**
       * Checks whether the 2 dates are non-null and fall within the same month of the same year.
       * @param {?} d1
       * @param {?} d2
       * @return {?}
       */
      SatMonthView.prototype._hasSameMonthAndYear = /**
       * Checks whether the 2 dates are non-null and fall within the same month of the same year.
       * @param {?} d1
       * @param {?} d2
       * @return {?}
       */
          function (d1, d2) {
              return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&
                  this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));
          };
      /**
       * @param {?} obj The object to check.
       * @return {?} The given object if it is both a date instance and valid, otherwise null.
       */
      SatMonthView.prototype._getValidDateOrNull = /**
       * @param {?} obj The object to check.
       * @return {?} The given object if it is both a date instance and valid, otherwise null.
       */
          function (obj) {
              return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
          };
      /**
       * Determines whether the user has the RTL layout direction.
       * @return {?}
       */
      SatMonthView.prototype._isRtl = /**
       * Determines whether the user has the RTL layout direction.
       * @return {?}
       */
          function () {
              return this._dir && this._dir.value === 'rtl';
          };
      /**
       * Updates range full parameter on each begin or end of interval update.
       * Necessary to display calendar-body correctly
       * @return {?}
       */
      SatMonthView.prototype.updateRangeSpecificValues = /**
       * Updates range full parameter on each begin or end of interval update.
       * Necessary to display calendar-body correctly
       * @return {?}
       */
          function () {
              if (this.rangeMode) {
                  this._beginDateNumber = this._getDateInCurrentMonth(this._beginDate);
                  this._endDateNumber = this._getDateInCurrentMonth(this._endDate);
                  this._rangeFull = this.beginDate && this.endDate && !this._beginDateNumber &&
                      !this._endDateNumber &&
                      this._dateAdapter.compareDate(this.beginDate, this.activeDate) <= 0 &&
                      this._dateAdapter.compareDate(this.activeDate, this.endDate) <= 0;
              }
              else {
                  this._beginDateNumber = this._endDateNumber = null;
                  this._rangeFull = false;
              }
          };
      SatMonthView.decorators = [
          { type: i0.Component, args: [{
                      moduleId: module.id,
                      selector: 'sat-month-view',
                      template: "<table class=\"mat-calendar-table\">\n  <thead class=\"mat-calendar-table-header\">\n    <tr><th *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th></tr>\n    <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"7\" aria-hidden=\"true\"></th></tr>\n  </thead>\n  <tbody sat-calendar-body\n         [label]=\"_monthLabel\"\n         [rows]=\"_weeks\"\n         [todayValue]=\"_todayDate\"\n         [selectedValue]=\"_selectedDate\"\n         [begin]=\"_beginDateNumber\"\n         [end]=\"_endDateNumber\"\n         [rangeFull]=\"_rangeFull\"\n         [rangeMode]=\"rangeMode\"\n         [labelMinRequiredCells]=\"3\"\n         [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\n         (selectedValueChange)=\"_dateSelected($event)\"\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n",
                      exportAs: 'matMonthView',
                      encapsulation: i0.ViewEncapsulation.None,
                      changeDetection: i0.ChangeDetectionStrategy.OnPush
                  }] }
      ];
      /** @nocollapse */
      SatMonthView.ctorParameters = function () {
          return [
              { type: i0.ChangeDetectorRef },
              { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_FORMATS,] }] },
              { type: DateAdapter, decorators: [{ type: i0.Optional }] },
              { type: bidi.Directionality, decorators: [{ type: i0.Optional }] }
          ];
      };
      SatMonthView.propDecorators = {
          beginDate: [{ type: i0.Input }],
          endDate: [{ type: i0.Input }],
          rangeMode: [{ type: i0.Input }],
          activeDate: [{ type: i0.Input }],
          selected: [{ type: i0.Input }],
          minDate: [{ type: i0.Input }],
          maxDate: [{ type: i0.Input }],
          dateFilter: [{ type: i0.Input }],
          selectedChange: [{ type: i0.Output }],
          _userSelection: [{ type: i0.Output }],
          activeDateChange: [{ type: i0.Output }],
          _matCalendarBody: [{ type: i0.ViewChild, args: [SatCalendarBody,] }]
      };
      return SatMonthView;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /** @type {?} */
  var yearsPerPage = 24;
  /** @type {?} */
  var yearsPerRow = 4;
  /**
   * An internal component used to display a year selector in the datepicker.
   * \@docs-private
   * @template D
   */
  var SatMultiYearView = (function () {
      function SatMultiYearView(_changeDetectorRef, _dateAdapter, _dir) {
          this._changeDetectorRef = _changeDetectorRef;
          this._dateAdapter = _dateAdapter;
          this._dir = _dir;
          /**
           * Emits when a new year is selected.
           */
          this.selectedChange = new i0.EventEmitter();
          /**
           * Emits the selected year. This doesn't imply a change on the selected date
           */
          this.yearSelected = new i0.EventEmitter();
          /**
           * Emits when any date is activated.
           */
          this.activeDateChange = new i0.EventEmitter();
          if (!this._dateAdapter) {
              throw createMissingDateImplError('DateAdapter');
          }
          this._activeDate = this._dateAdapter.today();
      }
      Object.defineProperty(SatMultiYearView.prototype, "activeDate", {
          /** The date to display in this multi-year view (everything other than the year is ignored). */
          get: /**
           * The date to display in this multi-year view (everything other than the year is ignored).
           * @return {?}
           */ function () { return this._activeDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              /** @type {?} */
              var oldActiveDate = this._activeDate;
              /** @type {?} */
              var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
              this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
              if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=
                  Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {
                  this._init();
              }
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatMultiYearView.prototype, "selected", {
          /** The currently selected date. */
          get: /**
           * The currently selected date.
           * @return {?}
           */ function () { return this._selected; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
              this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatMultiYearView.prototype, "minDate", {
          /** The minimum selectable date. */
          get: /**
           * The minimum selectable date.
           * @return {?}
           */ function () { return this._minDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatMultiYearView.prototype, "maxDate", {
          /** The maximum selectable date. */
          get: /**
           * The maximum selectable date.
           * @return {?}
           */ function () { return this._maxDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      /**
       * @return {?}
       */
      SatMultiYearView.prototype.ngAfterContentInit = /**
       * @return {?}
       */
          function () {
              this._init();
          };
      /** Initializes this multi-year view. */
      /**
       * Initializes this multi-year view.
       * @return {?}
       */
      SatMultiYearView.prototype._init = /**
       * Initializes this multi-year view.
       * @return {?}
       */
          function () {
              var _this = this;
              this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());
              /** @type {?} */
              var activeYear = this._dateAdapter.getYear(this._activeDate);
              /** @type {?} */
              var activeOffset = activeYear % yearsPerPage;
              this._years = [];
              for (var i = 0, row = []; i < yearsPerPage; i++) {
                  row.push(activeYear - activeOffset + i);
                  if (row.length == yearsPerRow) {
                      this._years.push(row.map(function (year) { return _this._createCellForYear(year); }));
                      row = [];
                  }
              }
              this._changeDetectorRef.markForCheck();
          };
      /** Handles when a new year is selected. */
      /**
       * Handles when a new year is selected.
       * @param {?} year
       * @return {?}
       */
      SatMultiYearView.prototype._yearSelected = /**
       * Handles when a new year is selected.
       * @param {?} year
       * @return {?}
       */
          function (year) {
              this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));
              /** @type {?} */
              var month = this._dateAdapter.getMonth(this.activeDate);
              /** @type {?} */
              var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));
              this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));
          };
      /** Handles keydown events on the calendar body when calendar is in multi-year view. */
      /**
       * Handles keydown events on the calendar body when calendar is in multi-year view.
       * @param {?} event
       * @return {?}
       */
      SatMultiYearView.prototype._handleCalendarBodyKeydown = /**
       * Handles keydown events on the calendar body when calendar is in multi-year view.
       * @param {?} event
       * @return {?}
       */
          function (event) {
              /** @type {?} */
              var oldActiveDate = this._activeDate;
              /** @type {?} */
              var isRtl = this._isRtl();
              switch (event.keyCode) {
                  case keycodes.LEFT_ARROW:
                      this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);
                      break;
                  case keycodes.RIGHT_ARROW:
                      this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);
                      break;
                  case keycodes.UP_ARROW:
                      this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);
                      break;
                  case keycodes.DOWN_ARROW:
                      this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);
                      break;
                  case keycodes.HOME:
                      this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);
                      break;
                  case keycodes.END:
                      this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);
                      break;
                  case keycodes.PAGE_UP:
                      this.activeDate =
                          this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);
                      break;
                  case keycodes.PAGE_DOWN:
                      this.activeDate =
                          this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);
                      break;
                  case keycodes.ENTER:
                      this._yearSelected(this._dateAdapter.getYear(this._activeDate));
                      break;
                  default:
                      // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                      return;
              }
              if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
                  this.activeDateChange.emit(this.activeDate);
              }
              this._focusActiveCell();
              // Prevent unexpected default actions such as form submission.
              event.preventDefault();
          };
      /**
       * @return {?}
       */
      SatMultiYearView.prototype._getActiveCell = /**
       * @return {?}
       */
          function () {
              return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;
          };
      /** Focuses the active cell after the microtask queue is empty. */
      /**
       * Focuses the active cell after the microtask queue is empty.
       * @return {?}
       */
      SatMultiYearView.prototype._focusActiveCell = /**
       * Focuses the active cell after the microtask queue is empty.
       * @return {?}
       */
          function () {
              this._matCalendarBody._focusActiveCell();
          };
      /**
       * Creates an SatCalendarCell for the given year.
       * @param {?} year
       * @return {?}
       */
      SatMultiYearView.prototype._createCellForYear = /**
       * Creates an SatCalendarCell for the given year.
       * @param {?} year
       * @return {?}
       */
          function (year) {
              /** @type {?} */
              var yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));
              return new SatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));
          };
      /**
       * Whether the given year is enabled.
       * @param {?} year
       * @return {?}
       */
      SatMultiYearView.prototype._shouldEnableYear = /**
       * Whether the given year is enabled.
       * @param {?} year
       * @return {?}
       */
          function (year) {
              // disable if the year is greater than maxDate lower than minDate
              if (year === undefined || year === null ||
                  (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||
                  (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {
                  return false;
              }
              // enable if it reaches here and there's no filter defined
              if (!this.dateFilter) {
                  return true;
              }
              /** @type {?} */
              var firstOfYear = this._dateAdapter.createDate(year, 0, 1);
              // If any date in the year is enabled count the year as enabled.
              for (var date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {
                  if (this.dateFilter(date)) {
                      return true;
                  }
              }
              return false;
          };
      /**
       * @param {?} obj The object to check.
       * @return {?} The given object if it is both a date instance and valid, otherwise null.
       */
      SatMultiYearView.prototype._getValidDateOrNull = /**
       * @param {?} obj The object to check.
       * @return {?} The given object if it is both a date instance and valid, otherwise null.
       */
          function (obj) {
              return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
          };
      /**
       * Determines whether the user has the RTL layout direction.
       * @return {?}
       */
      SatMultiYearView.prototype._isRtl = /**
       * Determines whether the user has the RTL layout direction.
       * @return {?}
       */
          function () {
              return this._dir && this._dir.value === 'rtl';
          };
      SatMultiYearView.decorators = [
          { type: i0.Component, args: [{
                      moduleId: module.id,
                      selector: 'sat-multi-year-view',
                      template: "<table class=\"mat-calendar-table\">\n  <thead class=\"mat-calendar-table-header\">\n    <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr>\n  </thead>\n  <tbody sat-calendar-body\n         allowDisabledSelection=\"true\"\n         [rows]=\"_years\"\n         [todayValue]=\"_todayYear\"\n         [selectedValue]=\"_selectedYear\"\n         [numCols]=\"4\"\n         [cellAspectRatio]=\"4 / 7\"\n         [activeCell]=\"_getActiveCell()\"\n         (selectedValueChange)=\"_yearSelected($event)\"\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n",
                      exportAs: 'matMultiYearView',
                      encapsulation: i0.ViewEncapsulation.None,
                      changeDetection: i0.ChangeDetectionStrategy.OnPush
                  }] }
      ];
      /** @nocollapse */
      SatMultiYearView.ctorParameters = function () {
          return [
              { type: i0.ChangeDetectorRef },
              { type: DateAdapter, decorators: [{ type: i0.Optional }] },
              { type: bidi.Directionality, decorators: [{ type: i0.Optional }] }
          ];
      };
      SatMultiYearView.propDecorators = {
          activeDate: [{ type: i0.Input }],
          selected: [{ type: i0.Input }],
          minDate: [{ type: i0.Input }],
          maxDate: [{ type: i0.Input }],
          dateFilter: [{ type: i0.Input }],
          selectedChange: [{ type: i0.Output }],
          yearSelected: [{ type: i0.Output }],
          activeDateChange: [{ type: i0.Output }],
          _matCalendarBody: [{ type: i0.ViewChild, args: [SatCalendarBody,] }]
      };
      return SatMultiYearView;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /**
   * An internal component used to display a single year in the datepicker.
   * \@docs-private
   * @template D
   */
  var SatYearView = (function () {
      function SatYearView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {
          this._changeDetectorRef = _changeDetectorRef;
          this._dateFormats = _dateFormats;
          this._dateAdapter = _dateAdapter;
          this._dir = _dir;
          /**
           * Emits when a new month is selected.
           */
          this.selectedChange = new i0.EventEmitter();
          /**
           * Emits the selected month. This doesn't imply a change on the selected date
           */
          this.monthSelected = new i0.EventEmitter();
          /**
           * Emits when any date is activated.
           */
          this.activeDateChange = new i0.EventEmitter();
          if (!this._dateAdapter) {
              throw createMissingDateImplError('DateAdapter');
          }
          if (!this._dateFormats) {
              throw createMissingDateImplError('MAT_DATE_FORMATS');
          }
          this._activeDate = this._dateAdapter.today();
      }
      Object.defineProperty(SatYearView.prototype, "activeDate", {
          /** The date to display in this year view (everything other than the year is ignored). */
          get: /**
           * The date to display in this year view (everything other than the year is ignored).
           * @return {?}
           */ function () { return this._activeDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              /** @type {?} */
              var oldActiveDate = this._activeDate;
              /** @type {?} */
              var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
              this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
              if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {
                  this._init();
              }
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatYearView.prototype, "selected", {
          /** The currently selected date. */
          get: /**
           * The currently selected date.
           * @return {?}
           */ function () { return this._selected; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
              this._selectedMonth = this._getMonthInCurrentYear(this._selected);
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatYearView.prototype, "minDate", {
          /** The minimum selectable date. */
          get: /**
           * The minimum selectable date.
           * @return {?}
           */ function () { return this._minDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatYearView.prototype, "maxDate", {
          /** The maximum selectable date. */
          get: /**
           * The maximum selectable date.
           * @return {?}
           */ function () { return this._maxDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      /**
       * @return {?}
       */
      SatYearView.prototype.ngAfterContentInit = /**
       * @return {?}
       */
          function () {
              this._init();
          };
      /** Handles when a new month is selected. */
      /**
       * Handles when a new month is selected.
       * @param {?} month
       * @return {?}
       */
      SatYearView.prototype._monthSelected = /**
       * Handles when a new month is selected.
       * @param {?} month
       * @return {?}
       */
          function (month) {
              /** @type {?} */
              var normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);
              this.monthSelected.emit(normalizedDate);
              /** @type {?} */
              var daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);
              this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));
          };
      /** Handles keydown events on the calendar body when calendar is in year view. */
      /**
       * Handles keydown events on the calendar body when calendar is in year view.
       * @param {?} event
       * @return {?}
       */
      SatYearView.prototype._handleCalendarBodyKeydown = /**
       * Handles keydown events on the calendar body when calendar is in year view.
       * @param {?} event
       * @return {?}
       */
          function (event) {
              /** @type {?} */
              var oldActiveDate = this._activeDate;
              /** @type {?} */
              var isRtl = this._isRtl();
              switch (event.keyCode) {
                  case keycodes.LEFT_ARROW:
                      this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);
                      break;
                  case keycodes.RIGHT_ARROW:
                      this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);
                      break;
                  case keycodes.UP_ARROW:
                      this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);
                      break;
                  case keycodes.DOWN_ARROW:
                      this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);
                      break;
                  case keycodes.HOME:
                      this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));
                      break;
                  case keycodes.END:
                      this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));
                      break;
                  case keycodes.PAGE_UP:
                      this.activeDate =
                          this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                      break;
                  case keycodes.PAGE_DOWN:
                      this.activeDate =
                          this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                      break;
                  case keycodes.ENTER:
                      this._monthSelected(this._dateAdapter.getMonth(this._activeDate));
                      break;
                  default:
                      // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                      return;
              }
              if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
                  this.activeDateChange.emit(this.activeDate);
              }
              this._focusActiveCell();
              // Prevent unexpected default actions such as form submission.
              event.preventDefault();
          };
      /** Initializes this year view. */
      /**
       * Initializes this year view.
       * @return {?}
       */
      SatYearView.prototype._init = /**
       * Initializes this year view.
       * @return {?}
       */
          function () {
              var _this = this;
              this._selectedMonth = this._getMonthInCurrentYear(this.selected);
              this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());
              this._yearLabel = this._dateAdapter.getYearName(this.activeDate);
              /** @type {?} */
              var monthNames = this._dateAdapter.getMonthNames('short');
              // First row of months only contains 5 elements so we can fit the year label on the same row.
              this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(function (row) { return row.map(function (month) { return _this._createCellForMonth(month, monthNames[month]); }); });
              this._changeDetectorRef.markForCheck();
          };
      /** Focuses the active cell after the microtask queue is empty. */
      /**
       * Focuses the active cell after the microtask queue is empty.
       * @return {?}
       */
      SatYearView.prototype._focusActiveCell = /**
       * Focuses the active cell after the microtask queue is empty.
       * @return {?}
       */
          function () {
              this._matCalendarBody._focusActiveCell();
          };
      /**
       * Gets the month in this year that the given Date falls on.
       * Returns null if the given Date is in another year.
       * @param {?} date
       * @return {?}
       */
      SatYearView.prototype._getMonthInCurrentYear = /**
       * Gets the month in this year that the given Date falls on.
       * Returns null if the given Date is in another year.
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?
                  this._dateAdapter.getMonth(date) : null;
          };
      /**
       * Creates an SatCalendarCell for the given month.
       * @param {?} month
       * @param {?} monthName
       * @return {?}
       */
      SatYearView.prototype._createCellForMonth = /**
       * Creates an SatCalendarCell for the given month.
       * @param {?} month
       * @param {?} monthName
       * @return {?}
       */
          function (month, monthName) {
              /** @type {?} */
              var ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);
              return new SatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));
          };
      /**
       * Whether the given month is enabled.
       * @param {?} month
       * @return {?}
       */
      SatYearView.prototype._shouldEnableMonth = /**
       * Whether the given month is enabled.
       * @param {?} month
       * @return {?}
       */
          function (month) {
              /** @type {?} */
              var activeYear = this._dateAdapter.getYear(this.activeDate);
              if (month === undefined || month === null ||
                  this._isYearAndMonthAfterMaxDate(activeYear, month) ||
                  this._isYearAndMonthBeforeMinDate(activeYear, month)) {
                  return false;
              }
              if (!this.dateFilter) {
                  return true;
              }
              /** @type {?} */
              var firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);
              // If any date in the month is enabled count the month as enabled.
              for (var date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {
                  if (this.dateFilter(date)) {
                      return true;
                  }
              }
              return false;
          };
      /**
       * Tests whether the combination month/year is after this.maxDate, considering
       * just the month and year of this.maxDate
       * @param {?} year
       * @param {?} month
       * @return {?}
       */
      SatYearView.prototype._isYearAndMonthAfterMaxDate = /**
       * Tests whether the combination month/year is after this.maxDate, considering
       * just the month and year of this.maxDate
       * @param {?} year
       * @param {?} month
       * @return {?}
       */
          function (year, month) {
              if (this.maxDate) {
                  /** @type {?} */
                  var maxYear = this._dateAdapter.getYear(this.maxDate);
                  /** @type {?} */
                  var maxMonth = this._dateAdapter.getMonth(this.maxDate);
                  return year > maxYear || (year === maxYear && month > maxMonth);
              }
              return false;
          };
      /**
       * Tests whether the combination month/year is before this.minDate, considering
       * just the month and year of this.minDate
       * @param {?} year
       * @param {?} month
       * @return {?}
       */
      SatYearView.prototype._isYearAndMonthBeforeMinDate = /**
       * Tests whether the combination month/year is before this.minDate, considering
       * just the month and year of this.minDate
       * @param {?} year
       * @param {?} month
       * @return {?}
       */
          function (year, month) {
              if (this.minDate) {
                  /** @type {?} */
                  var minYear = this._dateAdapter.getYear(this.minDate);
                  /** @type {?} */
                  var minMonth = this._dateAdapter.getMonth(this.minDate);
                  return year < minYear || (year === minYear && month < minMonth);
              }
              return false;
          };
      /**
       * @param {?} obj The object to check.
       * @return {?} The given object if it is both a date instance and valid, otherwise null.
       */
      SatYearView.prototype._getValidDateOrNull = /**
       * @param {?} obj The object to check.
       * @return {?} The given object if it is both a date instance and valid, otherwise null.
       */
          function (obj) {
              return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
          };
      /**
       * Determines whether the user has the RTL layout direction.
       * @return {?}
       */
      SatYearView.prototype._isRtl = /**
       * Determines whether the user has the RTL layout direction.
       * @return {?}
       */
          function () {
              return this._dir && this._dir.value === 'rtl';
          };
      SatYearView.decorators = [
          { type: i0.Component, args: [{
                      moduleId: module.id,
                      selector: 'sat-year-view',
                      template: "<table class=\"mat-calendar-table\">\n  <thead class=\"mat-calendar-table-header\">\n  <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr>\n  </thead>\n  <tbody sat-calendar-body\n         allowDisabledSelection=\"true\"\n         [label]=\"_yearLabel\"\n         [rows]=\"_months\"\n         [todayValue]=\"_todayMonth\"\n         [selectedValue]=\"_selectedMonth\"\n         [labelMinRequiredCells]=\"2\"\n         [numCols]=\"4\"\n         [cellAspectRatio]=\"4 / 7\"\n         [activeCell]=\"_dateAdapter.getMonth(activeDate)\"\n         (selectedValueChange)=\"_monthSelected($event)\"\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n",
                      exportAs: 'matYearView',
                      encapsulation: i0.ViewEncapsulation.None,
                      changeDetection: i0.ChangeDetectionStrategy.OnPush
                  }] }
      ];
      /** @nocollapse */
      SatYearView.ctorParameters = function () {
          return [
              { type: i0.ChangeDetectorRef },
              { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_FORMATS,] }] },
              { type: DateAdapter, decorators: [{ type: i0.Optional }] },
              { type: bidi.Directionality, decorators: [{ type: i0.Optional }] }
          ];
      };
      SatYearView.propDecorators = {
          activeDate: [{ type: i0.Input }],
          selected: [{ type: i0.Input }],
          minDate: [{ type: i0.Input }],
          maxDate: [{ type: i0.Input }],
          dateFilter: [{ type: i0.Input }],
          selectedChange: [{ type: i0.Output }],
          monthSelected: [{ type: i0.Output }],
          activeDateChange: [{ type: i0.Output }],
          _matCalendarBody: [{ type: i0.ViewChild, args: [SatCalendarBody,] }]
      };
      return SatYearView;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /**
   * Default header for SatCalendar
   * @template D
   */
  var SatCalendarHeader = (function () {
      function SatCalendarHeader(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {
          this._intl = _intl;
          this.calendar = calendar;
          this._dateAdapter = _dateAdapter;
          this._dateFormats = _dateFormats;
          this.calendar.stateChanges.subscribe(function () { return changeDetectorRef.markForCheck(); });
      }
      Object.defineProperty(SatCalendarHeader.prototype, "periodButtonText", {
          /** The label for the current calendar view. */
          get: /**
           * The label for the current calendar view.
           * @return {?}
           */ function () {
              if (this.calendar.currentView == 'month') {
                  return this._dateAdapter
                      .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)
                      .toLocaleUpperCase();
              }
              if (this.calendar.currentView == 'year') {
                  return this._dateAdapter.getYearName(this.calendar.activeDate);
              }
              /** @type {?} */
              var activeYear = this._dateAdapter.getYear(this.calendar.activeDate);
              /** @type {?} */
              var firstYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));
              /** @type {?} */
              var lastYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));
              return firstYearInView + " \u2013 " + lastYearInView;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatCalendarHeader.prototype, "periodButtonLabel", {
          get: /**
           * @return {?}
           */ function () {
              return this.calendar.currentView == 'month' ?
                  this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatCalendarHeader.prototype, "prevButtonLabel", {
          /** The label for the the previous button. */
          get: /**
           * The label for the the previous button.
           * @return {?}
           */ function () {
              return {
                  'month': this._intl.prevMonthLabel,
                  'year': this._intl.prevYearLabel,
                  'multi-year': this._intl.prevMultiYearLabel
              }[this.calendar.currentView];
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatCalendarHeader.prototype, "nextButtonLabel", {
          /** The label for the the next button. */
          get: /**
           * The label for the the next button.
           * @return {?}
           */ function () {
              return {
                  'month': this._intl.nextMonthLabel,
                  'year': this._intl.nextYearLabel,
                  'multi-year': this._intl.nextMultiYearLabel
              }[this.calendar.currentView];
          },
          enumerable: true,
          configurable: true
      });
      /** Handles user clicks on the period label.
       * Option`calendar.orderPeriodLabel` sort the label period views.
       * - Default [multi-year]: multi-year then back to month
       * - Month [month]: month > year > multi-year
       */
      /**
       * Handles user clicks on the period label.
       * Option`calendar.orderPeriodLabel` sort the label period views.
       * - Default [multi-year]: multi-year then back to month
       * - Month [month]: month > year > multi-year
       * @return {?}
       */
      SatCalendarHeader.prototype.currentPeriodClicked = /**
       * Handles user clicks on the period label.
       * Option`calendar.orderPeriodLabel` sort the label period views.
       * - Default [multi-year]: multi-year then back to month
       * - Month [month]: month > year > multi-year
       * @return {?}
       */
          function () {
              /** @type {?} */
              var mouthFirstOrder = ['month', 'year', 'multi-year'];
              /** @type {?} */
              var defaultOrder = ['month', 'multi-year', 'month'];
              /** @type {?} */
              var orderPeriod = this.calendar.orderPeriodLabel === 'month' ? mouthFirstOrder : defaultOrder;
              switch (this.calendar.currentView) {
                  case 'month':
                      this.calendar.currentView = orderPeriod[1];
                      break;
                  case 'year':
                      this.calendar.currentView = orderPeriod[2];
                      break;
                  default:
                      this.calendar.currentView = orderPeriod[0];
                      break;
              }
          };
      /** Handles user clicks on the previous button. */
      /**
       * Handles user clicks on the previous button.
       * @return {?}
       */
      SatCalendarHeader.prototype.previousClicked = /**
       * Handles user clicks on the previous button.
       * @return {?}
       */
          function () {
              this.calendar.activeDate = this.calendar.currentView == 'month' ?
                  this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :
                  this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);
          };
      /** Handles user clicks on the next button. */
      /**
       * Handles user clicks on the next button.
       * @return {?}
       */
      SatCalendarHeader.prototype.nextClicked = /**
       * Handles user clicks on the next button.
       * @return {?}
       */
          function () {
              this.calendar.activeDate = this.calendar.currentView == 'month' ?
                  this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :
                  this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);
          };
      /** Whether the previous period button is enabled. */
      /**
       * Whether the previous period button is enabled.
       * @return {?}
       */
      SatCalendarHeader.prototype.previousEnabled = /**
       * Whether the previous period button is enabled.
       * @return {?}
       */
          function () {
              if (!this.calendar.minDate) {
                  return true;
              }
              return !this.calendar.minDate ||
                  !this._isSameView(this.calendar.activeDate, this.calendar.minDate);
          };
      /** Whether the next period button is enabled. */
      /**
       * Whether the next period button is enabled.
       * @return {?}
       */
      SatCalendarHeader.prototype.nextEnabled = /**
       * Whether the next period button is enabled.
       * @return {?}
       */
          function () {
              return !this.calendar.maxDate ||
                  !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);
          };
      /**
       * Whether the two dates represent the same view in the current view mode (month or year).
       * @param {?} date1
       * @param {?} date2
       * @return {?}
       */
      SatCalendarHeader.prototype._isSameView = /**
       * Whether the two dates represent the same view in the current view mode (month or year).
       * @param {?} date1
       * @param {?} date2
       * @return {?}
       */
          function (date1, date2) {
              if (this.calendar.currentView == 'month') {
                  return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&
                      this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);
              }
              if (this.calendar.currentView == 'year') {
                  return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);
              }
              // Otherwise we are in 'multi-year' view.
              return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==
                  Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);
          };
      SatCalendarHeader.decorators = [
          { type: i0.Component, args: [{
                      moduleId: module.id,
                      selector: 'sat-calendar-header',
                      template: "<div class=\"mat-calendar-header\">\n  <div class=\"mat-calendar-controls\">\n    <button mat-button type=\"button\" class=\"mat-calendar-period-button\"\n            (click)=\"currentPeriodClicked()\" [attr.aria-label]=\"periodButtonLabel\"\n            cdkAriaLive=\"polite\">\n      {{periodButtonText}}\n      <div class=\"mat-calendar-arrow\"\n           [class.mat-calendar-invert]=\"calendar.currentView != 'month'\"></div>\n    </button>\n\n    <div class=\"mat-calendar-spacer\"></div>\n\n    <button mat-icon-button type=\"button\" class=\"mat-calendar-previous-button\"\n            [disabled]=\"!previousEnabled()\" (click)=\"previousClicked()\"\n            [attr.aria-label]=\"prevButtonLabel\">\n    </button>\n\n    <button mat-icon-button type=\"button\" class=\"mat-calendar-next-button\"\n            [disabled]=\"!nextEnabled()\" (click)=\"nextClicked()\"\n            [attr.aria-label]=\"nextButtonLabel\">\n    </button>\n  </div>\n</div>\n",
                      exportAs: 'matCalendarHeader',
                      encapsulation: i0.ViewEncapsulation.None,
                      changeDetection: i0.ChangeDetectionStrategy.OnPush
                  }] }
      ];
      /** @nocollapse */
      SatCalendarHeader.ctorParameters = function () {
          return [
              { type: SatDatepickerIntl },
              { type: SatCalendar, decorators: [{ type: i0.Inject, args: [i0.forwardRef(function () { return SatCalendar; }),] }] },
              { type: DateAdapter, decorators: [{ type: i0.Optional }] },
              { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_FORMATS,] }] },
              { type: i0.ChangeDetectorRef }
          ];
      };
      return SatCalendarHeader;
  }());
  /**
   * A calendar that is used as part of the datepicker.
   * \@docs-private
   * @template D
   */
  var SatCalendar = (function () {
      function SatCalendar(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {
          var _this = this;
          this._dateAdapter = _dateAdapter;
          this._dateFormats = _dateFormats;
          this._changeDetectorRef = _changeDetectorRef;
          /**
           * Whenever datepicker is for selecting range of dates.
           */
          this.rangeMode = false;
          /**
           * Emits when new pair of dates selected.
           */
          this.dateRangesChange = new i0.EventEmitter();
          /**
           * Whenever user already selected start of dates interval.
           */
          this._beginDateSelected = false;
          /**
           * Used for scheduling that focus should be moved to the active cell on the next tick.
           * We need to schedule it, rather than do it immediately, because we have to wait
           * for Angular to re-evaluate the view children.
           */
          this._moveFocusOnNextTick = false;
          /**
           * Whether the calendar should be started in month or year view.
           */
          this.startView = 'month';
          /**
           * Order the views when clicking on period label button
           */
          this.orderPeriodLabel = 'multi-year';
          /**
           * Emits when the currently selected date changes.
           */
          this.selectedChange = new i0.EventEmitter();
          /**
           * Emits the year chosen in multiyear view.
           * This doesn't imply a change on the selected date.
           */
          this.yearSelected = new i0.EventEmitter();
          /**
           * Emits the month chosen in year view.
           * This doesn't imply a change on the selected date.
           */
          this.monthSelected = new i0.EventEmitter();
          /**
           * Emits when any date is selected.
           */
          this._userSelection = new i0.EventEmitter();
          /**
           * Emits whenever there is a state change that the header may need to respond to.
           */
          this.stateChanges = new rxjs.Subject();
          if (!this._dateAdapter) {
              throw createMissingDateImplError('DateAdapter');
          }
          if (!this._dateFormats) {
              throw createMissingDateImplError('MAT_DATE_FORMATS');
          }
          this._intlChanges = _intl.changes.subscribe(function () {
              _changeDetectorRef.markForCheck();
              _this.stateChanges.next();
          });
      }
      Object.defineProperty(SatCalendar.prototype, "beginDate", {
          /** Beginning of date range. */
          get: /**
           * Beginning of date range.
           * @return {?}
           */ function () { return this._beginDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatCalendar.prototype, "endDate", {
          /** Date range end. */
          get: /**
           * Date range end.
           * @return {?}
           */ function () { return this._endDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatCalendar.prototype, "startAt", {
          /** A date representing the period (month or year) to start the calendar in. */
          get: /**
           * A date representing the period (month or year) to start the calendar in.
           * @return {?}
           */ function () { return this._startAt; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatCalendar.prototype, "selected", {
          /** The currently selected date. */
          get: /**
           * The currently selected date.
           * @return {?}
           */ function () { return this._selected; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatCalendar.prototype, "minDate", {
          /** The minimum selectable date. */
          get: /**
           * The minimum selectable date.
           * @return {?}
           */ function () { return this._minDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatCalendar.prototype, "maxDate", {
          /** The maximum selectable date. */
          get: /**
           * The maximum selectable date.
           * @return {?}
           */ function () { return this._maxDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatCalendar.prototype, "activeDate", {
          /**
           * The current active date. This determines which time period is shown and which date is
           * highlighted when using keyboard navigation.
           */
          get: /**
           * The current active date. This determines which time period is shown and which date is
           * highlighted when using keyboard navigation.
           * @return {?}
           */ function () { return this._clampedActiveDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);
              this.stateChanges.next();
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatCalendar.prototype, "currentView", {
          /** Whether the calendar is in month view. */
          get: /**
           * Whether the calendar is in month view.
           * @return {?}
           */ function () { return this._currentView; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._currentView = value;
              this._moveFocusOnNextTick = true;
          },
          enumerable: true,
          configurable: true
      });
      /**
       * @return {?}
       */
      SatCalendar.prototype.ngAfterContentInit = /**
       * @return {?}
       */
          function () {
              this._calendarHeaderPortal = new portal.ComponentPortal(this.headerComponent || SatCalendarHeader);
              this.activeDate = this.startAt || this._dateAdapter.today();
              // Assign to the private property since we don't want to move focus on init.
              this._currentView = this.startView;
          };
      /**
       * @return {?}
       */
      SatCalendar.prototype.ngAfterViewChecked = /**
       * @return {?}
       */
          function () {
              if (this._moveFocusOnNextTick) {
                  this._moveFocusOnNextTick = false;
                  this.focusActiveCell();
              }
          };
      /**
       * @return {?}
       */
      SatCalendar.prototype.ngOnDestroy = /**
       * @return {?}
       */
          function () {
              this._intlChanges.unsubscribe();
              this.stateChanges.complete();
          };
      /**
       * @param {?} changes
       * @return {?}
       */
      SatCalendar.prototype.ngOnChanges = /**
       * @param {?} changes
       * @return {?}
       */
          function (changes) {
              /** @type {?} */
              var change = changes["minDate"] || changes["maxDate"] || changes["dateFilter"];
              if (change && !change.firstChange) {
                  /** @type {?} */
                  var view = this._getCurrentViewComponent();
                  if (view) {
                      // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are
                      // passed down to the view via data bindings which won't be up-to-date when we call `_init`.
                      this._changeDetectorRef.detectChanges();
                      view._init();
                  }
              }
              this.stateChanges.next();
          };
      /**
       * @return {?}
       */
      SatCalendar.prototype.focusActiveCell = /**
       * @return {?}
       */
          function () {
              this._getCurrentViewComponent()._focusActiveCell();
          };
      /** Handles date selection in the month view. */
      /**
       * Handles date selection in the month view.
       * @param {?} date
       * @return {?}
       */
      SatCalendar.prototype._dateSelected = /**
       * Handles date selection in the month view.
       * @param {?} date
       * @return {?}
       */
          function (date) {
              if (this.rangeMode) {
                  if (!this._beginDateSelected) {
                      this._beginDateSelected = true;
                      this.beginDate = date;
                      this.endDate = date;
                  }
                  else {
                      this._beginDateSelected = false;
                      if (this._dateAdapter.compareDate(/** @type {?} */ (this.beginDate), date) <= 0) {
                          this.dateRangesChange.emit({ begin: /** @type {?} */ (this.beginDate), end: date });
                      }
                      else {
                          this.dateRangesChange.emit({ begin: date, end: /** @type {?} */ (this.beginDate) });
                      }
                  }
              }
              else if (!this._dateAdapter.sameDate(date, this.selected)) {
                  this.selectedChange.emit(date);
              }
          };
      /** Handles year selection in the multiyear view. */
      /**
       * Handles year selection in the multiyear view.
       * @param {?} normalizedYear
       * @return {?}
       */
      SatCalendar.prototype._yearSelectedInMultiYearView = /**
       * Handles year selection in the multiyear view.
       * @param {?} normalizedYear
       * @return {?}
       */
          function (normalizedYear) {
              this.yearSelected.emit(normalizedYear);
          };
      /** Handles month selection in the year view. */
      /**
       * Handles month selection in the year view.
       * @param {?} normalizedMonth
       * @return {?}
       */
      SatCalendar.prototype._monthSelectedInYearView = /**
       * Handles month selection in the year view.
       * @param {?} normalizedMonth
       * @return {?}
       */
          function (normalizedMonth) {
              this.monthSelected.emit(normalizedMonth);
          };
      /**
       * @return {?}
       */
      SatCalendar.prototype._userSelected = /**
       * @return {?}
       */
          function () {
              this._userSelection.emit();
          };
      /** Handles year/month selection in the multi-year/year views. */
      /**
       * Handles year/month selection in the multi-year/year views.
       * @param {?} date
       * @param {?} view
       * @return {?}
       */
      SatCalendar.prototype._goToDateInView = /**
       * Handles year/month selection in the multi-year/year views.
       * @param {?} date
       * @param {?} view
       * @return {?}
       */
          function (date, view) {
              this.activeDate = date;
              this.currentView = view;
          };
      /**
       * @param {?} obj The object to check.
       * @return {?} The given object if it is both a date instance and valid, otherwise null.
       */
      SatCalendar.prototype._getValidDateOrNull = /**
       * @param {?} obj The object to check.
       * @return {?} The given object if it is both a date instance and valid, otherwise null.
       */
          function (obj) {
              return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
          };
      /**
       * Returns the component instance that corresponds to the current calendar view.
       * @return {?}
       */
      SatCalendar.prototype._getCurrentViewComponent = /**
       * Returns the component instance that corresponds to the current calendar view.
       * @return {?}
       */
          function () {
              return this.monthView || this.yearView || this.multiYearView;
          };
      SatCalendar.decorators = [
          { type: i0.Component, args: [{
                      moduleId: module.id,
                      selector: 'sat-calendar',
                      template: "\n<ng-template [cdkPortalOutlet]=\"_calendarHeaderPortal\"></ng-template>\n\n<div class=\"mat-calendar-content\" [ngSwitch]=\"currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n  <sat-month-view\n      *ngSwitchCase=\"'month'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [beginDate]=\"beginDate\"\n      [endDate]=\"endDate\"\n      [rangeMode]=\"rangeMode\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (selectedChange)=\"_dateSelected($event)\"\n      (_userSelection)=\"_userSelected()\">\n  </sat-month-view>\n\n  <sat-year-view\n      *ngSwitchCase=\"'year'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (monthSelected)=\"_monthSelectedInYearView($event)\"\n      (selectedChange)=\"_goToDateInView($event, 'month')\">\n  </sat-year-view>\n\n  <sat-multi-year-view\n      *ngSwitchCase=\"'multi-year'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n      (selectedChange)=\"_goToDateInView($event, 'year')\">\n  </sat-multi-year-view>\n</div>\n",
                      host: {
                          'class': 'mat-calendar',
                      },
                      exportAs: 'matCalendar',
                      encapsulation: i0.ViewEncapsulation.None,
                      changeDetection: i0.ChangeDetectionStrategy.OnPush,
                      styles: [".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0}.mat-calendar-content{padding:0 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{-webkit-transform:rotate(180deg);transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;-webkit-transform:translateX(2px) rotate(-45deg);transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;-webkit-transform:translateX(-2px) rotate(45deg);transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}"]
                  }] }
      ];
      /** @nocollapse */
      SatCalendar.ctorParameters = function () {
          return [
              { type: SatDatepickerIntl },
              { type: DateAdapter, decorators: [{ type: i0.Optional }] },
              { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_FORMATS,] }] },
              { type: i0.ChangeDetectorRef }
          ];
      };
      SatCalendar.propDecorators = {
          beginDate: [{ type: i0.Input }],
          endDate: [{ type: i0.Input }],
          rangeMode: [{ type: i0.Input }],
          dateRangesChange: [{ type: i0.Output }],
          headerComponent: [{ type: i0.Input }],
          startAt: [{ type: i0.Input }],
          startView: [{ type: i0.Input }],
          selected: [{ type: i0.Input }],
          minDate: [{ type: i0.Input }],
          maxDate: [{ type: i0.Input }],
          dateFilter: [{ type: i0.Input }],
          orderPeriodLabel: [{ type: i0.Input }],
          selectedChange: [{ type: i0.Output }],
          yearSelected: [{ type: i0.Output }],
          monthSelected: [{ type: i0.Output }],
          _userSelection: [{ type: i0.Output }],
          monthView: [{ type: i0.ViewChild, args: [SatMonthView,] }],
          yearView: [{ type: i0.ViewChild, args: [SatYearView,] }],
          multiYearView: [{ type: i0.ViewChild, args: [SatMultiYearView,] }]
      };
      return SatCalendar;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /** *
   * Animations used by the Material datepicker.
    @type {?} */
  var matDatepickerAnimations = {
      /** Transforms the height of the datepicker's calendar. */
      transformPanel: animations.trigger('transformPanel', [
          animations.state('void', animations.style({ opacity: 0, transform: 'scale(1, 0)' })),
          animations.state('enter', animations.style({ opacity: 1, transform: 'scale(1, 1)' })),
          animations.transition('void => enter', animations.group([
              animations.query('@fadeInCalendar', animations.animateChild()),
              animations.animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')
          ])),
          animations.transition('* => void', animations.animate('100ms linear', animations.style({ opacity: 0 })))
      ]),
      /** Fades in the content of the calendar. */
      fadeInCalendar: animations.trigger('fadeInCalendar', [
          animations.state('void', animations.style({ opacity: 0 })),
          animations.state('enter', animations.style({ opacity: 1 })),
          animations.transition('void => *', animations.animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))
      ])
  };

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /** *
   * Used to generate a unique ID for each datepicker instance.
    @type {?} */
  var datepickerUid = 0;
  /** *
   * Injection token that determines the scroll handling while the calendar is open.
    @type {?} */
  var MAT_DATEPICKER_SCROLL_STRATEGY = new i0.InjectionToken('sat-datepicker-scroll-strategy');
  /**
   * \@docs-private
   * @param {?} overlay
   * @return {?}
   */
  function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay$$1) {
      return function () { return overlay$$1.scrollStrategies.reposition(); };
  }
  /** *
   * \@docs-private
    @type {?} */
  var MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {
      provide: MAT_DATEPICKER_SCROLL_STRATEGY,
      deps: [overlay.Overlay],
      useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,
  };
  /**
   * \@docs-private
   */
  var /**
   * \@docs-private
   */ SatDatepickerContentBase = (function () {
      function SatDatepickerContentBase(_elementRef) {
          this._elementRef = _elementRef;
      }
      return SatDatepickerContentBase;
  }());
  /** @type {?} */
  var _SatDatepickerContentMixinBase = core.mixinColor(SatDatepickerContentBase);
  /**
   * Component used as the content for the datepicker dialog and popup. We use this instead of using
   * SatCalendar directly as the content so we can control the initial focus. This also gives us a
   * place to put additional features of the popup that are not part of the calendar itself in the
   * future. (e.g. confirmation buttons).
   * \@docs-private
   * @template D
   */
  var SatDatepickerContent = (function (_super) {
      __extends(SatDatepickerContent, _super);
      function SatDatepickerContent(elementRef) {
          return _super.call(this, elementRef) || this;
      }
      /**
       * @return {?}
       */
      SatDatepickerContent.prototype.ngAfterViewInit = /**
       * @return {?}
       */
          function () {
              this._calendar.focusActiveCell();
          };
      /**
       * @return {?}
       */
      SatDatepickerContent.prototype.close = /**
       * @return {?}
       */
          function () {
              if (this.datepicker.closeAfterSelection) {
                  this.datepicker.close();
              }
          };
      SatDatepickerContent.decorators = [
          { type: i0.Component, args: [{
                      moduleId: module.id,
                      selector: 'sat-datepicker-content',
                      template: "<sat-calendar cdkTrapFocus\n              [id]=\"datepicker.id\"\n              [ngClass]=\"datepicker.panelClass\"\n              [startAt]=\"datepicker.startAt\"\n              [startView]=\"datepicker.startView\"\n              [minDate]=\"datepicker._minDate\"\n              [maxDate]=\"datepicker._maxDate\"\n              [dateFilter]=\"datepicker._dateFilter\"\n              [beginDate]=\"datepicker._beginDate\"\n              [endDate]=\"datepicker._endDate\"\n              [headerComponent]=\"datepicker.calendarHeaderComponent\"\n              [rangeMode]=\"datepicker.rangeMode\"\n              [selected]=\"datepicker._selected\"\n              [@fadeInCalendar]=\"'enter'\"\n              [orderPeriodLabel]=\"datepicker.orderPeriodLabel\"\n              (selectedChange)=\"datepicker._select($event)\"\n              (dateRangesChange)=\"datepicker._selectRange($event)\"\n              (yearSelected)=\"datepicker._selectYear($event)\"\n              (monthSelected)=\"datepicker._selectMonth($event)\"\n              (_userSelection)=\"close()\">\n</sat-calendar>\n",
                      host: {
                          'class': 'mat-datepicker-content',
                          '[@transformPanel]': '"enter"',
                          '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',
                      },
                      animations: [
                          matDatepickerAnimations.transformPanel,
                          matDatepickerAnimations.fadeInCalendar,
                      ],
                      exportAs: 'matDatepickerContent',
                      encapsulation: i0.ViewEncapsulation.None,
                      changeDetection: i0.ChangeDetectionStrategy.OnPush,
                      inputs: ['color'],
                      styles: [".mat-datepicker-content{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);display:block}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12);display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}"]
                  }] }
      ];
      /** @nocollapse */
      SatDatepickerContent.ctorParameters = function () {
          return [
              { type: i0.ElementRef }
          ];
      };
      SatDatepickerContent.propDecorators = {
          _calendar: [{ type: i0.ViewChild, args: [SatCalendar,] }]
      };
      return SatDatepickerContent;
  }(_SatDatepickerContentMixinBase));
  /**
   * Component responsible for managing the datepicker popup/dialog.
   * @template D
   */
  var SatDatepicker = (function () {
      function SatDatepicker(_dialog, _overlay, _ngZone, _viewContainerRef, _scrollStrategy, _dateAdapter, _dir, _document) {
          this._dialog = _dialog;
          this._overlay = _overlay;
          this._ngZone = _ngZone;
          this._viewContainerRef = _viewContainerRef;
          this._scrollStrategy = _scrollStrategy;
          this._dateAdapter = _dateAdapter;
          this._dir = _dir;
          this._document = _document;
          /**
           * The view that the calendar should start in.
           */
          this.startView = 'month';
          this._touchUi = false;
          /**
           * Emits selected year in multiyear view.
           * This doesn't imply a change on the selected date.
           */
          this.yearSelected = new i0.EventEmitter();
          /**
           * Emits selected month in year view.
           * This doesn't imply a change on the selected date.
           */
          this.monthSelected = new i0.EventEmitter();
          /**
           * Emits when the datepicker has been opened.
           */
          this.openedStream = new i0.EventEmitter();
          /**
           * Emits when the datepicker has been closed.
           */
          this.closedStream = new i0.EventEmitter();
          /**
           * Enables datepicker closing after selection
           */
          this.closeAfterSelection = true;
          /**
           * Order the views when clicking on period label button
           */
          this.orderPeriodLabel = 'multi-year';
          this._opened = false;
          /**
           * The id for the datepicker calendar.
           */
          this.id = "sat-datepicker-" + datepickerUid++;
          this._validSelected = null;
          /**
           * The element that was focused before the datepicker was opened.
           */
          this._focusedElementBeforeOpen = null;
          /**
           * Subscription to value changes in the associated input element.
           */
          this._inputSubscription = rxjs.Subscription.EMPTY;
          /**
           * Emits when the datepicker is disabled.
           */
          this._disabledChange = new rxjs.Subject();
          /**
           * Emits new selected date when selected date changes.
           */
          this._selectedChanged = new rxjs.Subject();
          if (!this._dateAdapter) {
              throw createMissingDateImplError('DateAdapter');
          }
      }
      Object.defineProperty(SatDatepicker.prototype, "rangeMode", {
          /** Whenever datepicker is for selecting range of dates. */
          get: /**
           * Whenever datepicker is for selecting range of dates.
           * @return {?}
           */ function () {
              return this._rangeMode;
          },
          set: /**
           * @param {?} mode
           * @return {?}
           */ function (mode) {
              this._rangeMode = mode;
              if (this.rangeMode) {
                  this._validSelected = null;
              }
              else {
                  this._beginDate = this._endDate = null;
              }
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepicker.prototype, "beginDate", {
          /** Start of dates interval. */
          get: /**
           * Start of dates interval.
           * @return {?}
           */ function () { return this._beginDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._validSelected = null;
              this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepicker.prototype, "endDate", {
          /** End of dates interval. */
          get: /**
           * End of dates interval.
           * @return {?}
           */ function () { return this._endDate; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._validSelected = null;
              this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepicker.prototype, "startAt", {
          /** The date to open the calendar to initially. */
          get: /**
           * The date to open the calendar to initially.
           * @return {?}
           */ function () {
              // If an explicit startAt is set we start there, otherwise we start at whatever the currently
              // selected value is.
              if (this.rangeMode) {
                  return this._startAt || (this._datepickerInput && this._datepickerInput.value ?
                      ((this._datepickerInput.value)).begin : null);
              }
              return this._startAt || (this._datepickerInput ? /** @type {?} */ (this._datepickerInput.value) : null);
          },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepicker.prototype, "color", {
          /** Color palette to use on the datepicker's calendar. */
          get: /**
           * Color palette to use on the datepicker's calendar.
           * @return {?}
           */ function () {
              return this._color ||
                  (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);
          },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._color = value;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepicker.prototype, "touchUi", {
          /**
           * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather
           * than a popup and elements have more padding to allow for bigger touch targets.
           */
          get: /**
           * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather
           * than a popup and elements have more padding to allow for bigger touch targets.
           * @return {?}
           */ function () { return this._touchUi; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._touchUi = coercion.coerceBooleanProperty(value);
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepicker.prototype, "disabled", {
          /** Whether the datepicker pop-up should be disabled. */
          get: /**
           * Whether the datepicker pop-up should be disabled.
           * @return {?}
           */ function () {
              return this._disabled === undefined && this._datepickerInput ?
                  this._datepickerInput.disabled : !!this._disabled;
          },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              /** @type {?} */
              var newValue = coercion.coerceBooleanProperty(value);
              if (newValue !== this._disabled) {
                  this._disabled = newValue;
                  this._disabledChange.next(newValue);
              }
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepicker.prototype, "opened", {
          /** Whether the calendar is open. */
          get: /**
           * Whether the calendar is open.
           * @return {?}
           */ function () { return this._opened; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) { value ? this.open() : this.close(); },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepicker.prototype, "_selected", {
          /** The currently selected date. */
          get: /**
           * The currently selected date.
           * @return {?}
           */ function () { return this._validSelected; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) { this._validSelected = value; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepicker.prototype, "_minDate", {
          /** The minimum selectable date. */
          get: /**
           * The minimum selectable date.
           * @return {?}
           */ function () {
              return this._datepickerInput && this._datepickerInput.min;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepicker.prototype, "_maxDate", {
          /** The maximum selectable date. */
          get: /**
           * The maximum selectable date.
           * @return {?}
           */ function () {
              return this._datepickerInput && this._datepickerInput.max;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepicker.prototype, "_dateFilter", {
          get: /**
           * @return {?}
           */ function () {
              return this._datepickerInput && this._datepickerInput._dateFilter;
          },
          enumerable: true,
          configurable: true
      });
      /**
       * @return {?}
       */
      SatDatepicker.prototype.ngOnDestroy = /**
       * @return {?}
       */
          function () {
              this.close();
              this._inputSubscription.unsubscribe();
              this._disabledChange.complete();
              if (this._popupRef) {
                  this._popupRef.dispose();
                  this._popupComponentRef = null;
              }
          };
      /** Selects the given date */
      /**
       * Selects the given date
       * @param {?} date
       * @return {?}
       */
      SatDatepicker.prototype._select = /**
       * Selects the given date
       * @param {?} date
       * @return {?}
       */
          function (date) {
              /** @type {?} */
              var oldValue = this._selected;
              this._selected = date;
              if (!this._dateAdapter.sameDate(oldValue, this._selected)) {
                  this._selectedChanged.next(date);
              }
          };
      /** Selects the given date range */
      /**
       * Selects the given date range
       * @param {?} dates
       * @return {?}
       */
      SatDatepicker.prototype._selectRange = /**
       * Selects the given date range
       * @param {?} dates
       * @return {?}
       */
          function (dates) {
              if (!this._dateAdapter.sameDate(dates.begin, this.beginDate) ||
                  !this._dateAdapter.sameDate(dates.end, this.endDate)) {
                  this._selectedChanged.next(dates);
              }
              this._beginDate = dates.begin;
              this._endDate = dates.end;
          };
      /** Emits the selected year in multiyear view */
      /**
       * Emits the selected year in multiyear view
       * @param {?} normalizedYear
       * @return {?}
       */
      SatDatepicker.prototype._selectYear = /**
       * Emits the selected year in multiyear view
       * @param {?} normalizedYear
       * @return {?}
       */
          function (normalizedYear) {
              this.yearSelected.emit(normalizedYear);
          };
      /** Emits selected month in year view */
      /**
       * Emits selected month in year view
       * @param {?} normalizedMonth
       * @return {?}
       */
      SatDatepicker.prototype._selectMonth = /**
       * Emits selected month in year view
       * @param {?} normalizedMonth
       * @return {?}
       */
          function (normalizedMonth) {
              this.monthSelected.emit(normalizedMonth);
          };
      /**
       * Register an input with this datepicker.
       * @param input The datepicker input to register with this datepicker.
       */
      /**
       * Register an input with this datepicker.
       * @param {?} input The datepicker input to register with this datepicker.
       * @return {?}
       */
      SatDatepicker.prototype._registerInput = /**
       * Register an input with this datepicker.
       * @param {?} input The datepicker input to register with this datepicker.
       * @return {?}
       */
          function (input$$1) {
              var _this = this;
              if (this._datepickerInput) {
                  throw Error('A SatDatepicker can only be associated with a single input.');
              }
              this._datepickerInput = input$$1;
              this._inputSubscription =
                  this._datepickerInput._valueChange
                      .subscribe(function (value) {
                      if (value === null) {
                          _this.beginDate = _this.endDate = _this._selected = null;
                          return;
                      }
                      if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {
                          value = /** @type {?} */ (value);
                          if (value.begin && value.end &&
                              _this._dateAdapter.compareDate(value.begin, value.end) <= 0) {
                              _this.beginDate = value.begin;
                              _this.endDate = value.end;
                          }
                          else {
                              _this.beginDate = _this.endDate = null;
                          }
                      }
                      else {
                          _this._selected = /** @type {?} */ (value);
                      }
                  });
          };
      /** Open the calendar. */
      /**
       * Open the calendar.
       * @return {?}
       */
      SatDatepicker.prototype.open = /**
       * Open the calendar.
       * @return {?}
       */
          function () {
              if (this._opened || this.disabled) {
                  return;
              }
              if (!this._datepickerInput) {
                  throw Error('Attempted to open an SatDatepicker with no associated input.');
              }
              if (this._document) {
                  this._focusedElementBeforeOpen = this._document.activeElement;
              }
              this.touchUi ? this._openAsDialog() : this._openAsPopup();
              this._opened = true;
              this.openedStream.emit();
          };
      /** Close the calendar. */
      /**
       * Close the calendar.
       * @return {?}
       */
      SatDatepicker.prototype.close = /**
       * Close the calendar.
       * @return {?}
       */
          function () {
              var _this = this;
              if (!this._opened) {
                  return;
              }
              if (this._popupRef && this._popupRef.hasAttached()) {
                  this._popupRef.detach();
              }
              if (this._dialogRef) {
                  this._dialogRef.close();
                  this._dialogRef = null;
              }
              if (this._calendarPortal && this._calendarPortal.isAttached) {
                  this._calendarPortal.detach();
              }
              /** @type {?} */
              var completeClose = function () {
                  // The `_opened` could've been reset already if
                  // we got two events in quick succession.
                  if (_this._opened) {
                      _this._opened = false;
                      _this.closedStream.emit();
                      _this._focusedElementBeforeOpen = null;
                  }
              };
              if (this._focusedElementBeforeOpen &&
                  typeof this._focusedElementBeforeOpen.focus === 'function') {
                  // Because IE moves focus asynchronously, we can't count on it being restored before we've
                  // marked the datepicker as closed. If the event fires out of sequence and the element that
                  // we're refocusing opens the datepicker on focus, the user could be stuck with not being
                  // able to close the calendar at all. We work around it by making the logic, that marks
                  // the datepicker as closed, async as well.
                  this._focusedElementBeforeOpen.focus();
                  setTimeout(completeClose);
              }
              else {
                  completeClose();
              }
          };
      /**
       * Open the calendar as a dialog.
       * @return {?}
       */
      SatDatepicker.prototype._openAsDialog = /**
       * Open the calendar as a dialog.
       * @return {?}
       */
          function () {
              var _this = this;
              this._dialogRef = this._dialog.open(SatDatepickerContent, {
                  direction: this._dir ? this._dir.value : 'ltr',
                  viewContainerRef: this._viewContainerRef,
                  panelClass: 'mat-datepicker-dialog',
              });
              this._dialogRef.afterClosed().subscribe(function () { return _this.close(); });
              this._dialogRef.componentInstance.datepicker = this;
              this._setColor();
          };
      /**
       * Open the calendar as a popup.
       * @return {?}
       */
      SatDatepicker.prototype._openAsPopup = /**
       * Open the calendar as a popup.
       * @return {?}
       */
          function () {
              var _this = this;
              if (!this._calendarPortal) {
                  this._calendarPortal = new portal.ComponentPortal(SatDatepickerContent, this._viewContainerRef);
              }
              if (!this._popupRef) {
                  this._createPopup();
              }
              if (!this._popupRef.hasAttached()) {
                  this._popupComponentRef = this._popupRef.attach(this._calendarPortal);
                  this._popupComponentRef.instance.datepicker = this;
                  this._setColor();
                  // Update the position once the calendar has rendered.
                  this._ngZone.onStable.asObservable().pipe(operators.take(1)).subscribe(function () {
                      _this._popupRef.updatePosition();
                  });
              }
          };
      /**
       * Create the popup.
       * @return {?}
       */
      SatDatepicker.prototype._createPopup = /**
       * Create the popup.
       * @return {?}
       */
          function () {
              var _this = this;
              /** @type {?} */
              var overlayConfig = new overlay.OverlayConfig({
                  positionStrategy: this._createPopupPositionStrategy(),
                  hasBackdrop: true,
                  backdropClass: 'mat-overlay-transparent-backdrop',
                  direction: this._dir,
                  scrollStrategy: this._scrollStrategy(),
                  panelClass: 'mat-datepicker-popup',
              });
              this._popupRef = this._overlay.create(overlayConfig);
              this._popupRef.overlayElement.setAttribute('role', 'dialog');
              rxjs.merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(operators.filter(function (event) {
                  // Closing on alt + up is only valid when there's an input associated with the datepicker.
                  return event.keyCode === keycodes.ESCAPE ||
                      (_this._datepickerInput && event.altKey && event.keyCode === keycodes.UP_ARROW);
              }))).subscribe(function () { return _this.close(); });
          };
      /**
       * Create the popup PositionStrategy.
       * @return {?}
       */
      SatDatepicker.prototype._createPopupPositionStrategy = /**
       * Create the popup PositionStrategy.
       * @return {?}
       */
          function () {
              return this._overlay.position()
                  .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())
                  .withTransformOriginOn('.mat-datepicker-content')
                  .withFlexibleDimensions(false)
                  .withViewportMargin(8)
                  .withPush(false)
                  .withPositions([
                  {
                      originX: 'start',
                      originY: 'bottom',
                      overlayX: 'start',
                      overlayY: 'top'
                  },
                  {
                      originX: 'start',
                      originY: 'top',
                      overlayX: 'start',
                      overlayY: 'bottom'
                  },
                  {
                      originX: 'end',
                      originY: 'bottom',
                      overlayX: 'end',
                      overlayY: 'top'
                  },
                  {
                      originX: 'end',
                      originY: 'top',
                      overlayX: 'end',
                      overlayY: 'bottom'
                  }
              ]);
          };
      /**
       * @param {?} obj The object to check.
       * @return {?} The given object if it is both a date instance and valid, otherwise null.
       */
      SatDatepicker.prototype._getValidDateOrNull = /**
       * @param {?} obj The object to check.
       * @return {?} The given object if it is both a date instance and valid, otherwise null.
       */
          function (obj) {
              return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
          };
      /**
       * Passes the current theme color along to the calendar overlay.
       * @return {?}
       */
      SatDatepicker.prototype._setColor = /**
       * Passes the current theme color along to the calendar overlay.
       * @return {?}
       */
          function () {
              /** @type {?} */
              var color = this.color;
              if (this._popupComponentRef) {
                  this._popupComponentRef.instance.color = color;
              }
              if (this._dialogRef) {
                  this._dialogRef.componentInstance.color = color;
              }
          };
      SatDatepicker.decorators = [
          { type: i0.Component, args: [{
                      moduleId: module.id,
                      selector: 'sat-datepicker',
                      template: '',
                      exportAs: 'matDatepicker',
                      changeDetection: i0.ChangeDetectionStrategy.OnPush,
                      encapsulation: i0.ViewEncapsulation.None
                  }] }
      ];
      /** @nocollapse */
      SatDatepicker.ctorParameters = function () {
          return [
              { type: dialog.MatDialog },
              { type: overlay.Overlay },
              { type: i0.NgZone },
              { type: i0.ViewContainerRef },
              { type: undefined, decorators: [{ type: i0.Inject, args: [MAT_DATEPICKER_SCROLL_STRATEGY,] }] },
              { type: DateAdapter, decorators: [{ type: i0.Optional }] },
              { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },
              { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [common.DOCUMENT,] }] }
          ];
      };
      SatDatepicker.propDecorators = {
          rangeMode: [{ type: i0.Input }],
          beginDate: [{ type: i0.Input }],
          endDate: [{ type: i0.Input }],
          calendarHeaderComponent: [{ type: i0.Input }],
          startAt: [{ type: i0.Input }],
          startView: [{ type: i0.Input }],
          color: [{ type: i0.Input }],
          touchUi: [{ type: i0.Input }],
          disabled: [{ type: i0.Input }],
          yearSelected: [{ type: i0.Output }],
          monthSelected: [{ type: i0.Output }],
          panelClass: [{ type: i0.Input }],
          openedStream: [{ type: i0.Output, args: ['opened',] }],
          closedStream: [{ type: i0.Output, args: ['closed',] }],
          closeAfterSelection: [{ type: i0.Input }],
          orderPeriodLabel: [{ type: i0.Input }],
          opened: [{ type: i0.Input }]
      };
      return SatDatepicker;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /** @type {?} */
  var MAT_DATEPICKER_VALUE_ACCESSOR = {
      provide: forms.NG_VALUE_ACCESSOR,
      useExisting: i0.forwardRef(function () { return SatDatepickerInput; }),
      multi: true
  };
  /** @type {?} */
  var MAT_DATEPICKER_VALIDATORS = {
      provide: forms.NG_VALIDATORS,
      useExisting: i0.forwardRef(function () { return SatDatepickerInput; }),
      multi: true
  };
  /**
   * An event used for datepicker input and change events. We don't always have access to a native
   * input or change event because the event may have been triggered by the user clicking on the
   * calendar popup. For consistency, we always use SatDatepickerInputEvent instead.
   * @template D
   */
  var /**
   * An event used for datepicker input and change events. We don't always have access to a native
   * input or change event because the event may have been triggered by the user clicking on the
   * calendar popup. For consistency, we always use SatDatepickerInputEvent instead.
   * @template D
   */ SatDatepickerInputEvent = (function () {
      function SatDatepickerInputEvent(target, targetElement) {
          this.target = target;
          this.targetElement = targetElement;
          this.value = this.target.value;
      }
      return SatDatepickerInputEvent;
  }());
  /**
   * Directive used to connect an input to a SatDatepicker.
   * @template D
   */
  var SatDatepickerInput = (function () {
      function SatDatepickerInput(_elementRef, _dateAdapter, _dateFormats, _formField) {
          var _this = this;
          this._elementRef = _elementRef;
          this._dateAdapter = _dateAdapter;
          this._dateFormats = _dateFormats;
          this._formField = _formField;
          /**
           * Emits when a `change` event is fired on this `<input>`.
           */
          this.dateChange = new i0.EventEmitter();
          /**
           * Emits when an `input` event is fired on this `<input>`.
           */
          this.dateInput = new i0.EventEmitter();
          /**
           * Emits when the value changes (either due to user input or programmatic change).
           */
          this._valueChange = new i0.EventEmitter();
          /**
           * Emits when the disabled state has changed
           */
          this._disabledChange = new i0.EventEmitter();
          this._onTouched = function () { };
          this._cvaOnChange = function () { };
          this._validatorOnChange = function () { };
          this._datepickerSubscription = rxjs.Subscription.EMPTY;
          this._localeSubscription = rxjs.Subscription.EMPTY;
          /**
           * The form control validator for whether the input parses.
           */
          this._parseValidator = function () {
              return _this._lastValueValid ?
                  null : { 'matDatepickerParse': { 'text': _this._elementRef.nativeElement.value } };
          };
          /**
           * The form control validator for the min date.
           */
          this._minValidator = function (control) {
              if (_this._datepicker.rangeMode && control.value) {
                  /** @type {?} */
                  var beginDate = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value.begin));
                  /** @type {?} */
                  var endDate = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value.end));
                  if (_this.min) {
                      if (beginDate && _this._dateAdapter.compareDate(_this.min, beginDate) > 0) {
                          return { 'matDatepickerMin': { 'min': _this.min, 'actual': beginDate } };
                      }
                      if (endDate && _this._dateAdapter.compareDate(_this.min, endDate) > 0) {
                          return { 'matDatepickerMin': { 'min': _this.min, 'actual': endDate } };
                      }
                  }
                  return null;
              }
              /** @type {?} */
              var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
              return (!_this.min || !controlValue ||
                  _this._dateAdapter.compareDate(_this.min, controlValue) <= 0) ?
                  null : { 'matDatepickerMin': { 'min': _this.min, 'actual': controlValue } };
          };
          /**
           * The form control validator for the max date.
           */
          this._maxValidator = function (control) {
              if (_this._datepicker.rangeMode && control.value) {
                  /** @type {?} */
                  var beginDate = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value.begin));
                  /** @type {?} */
                  var endDate = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value.end));
                  if (_this.max) {
                      if (beginDate && _this._dateAdapter.compareDate(_this.max, beginDate) < 0) {
                          return { 'matDatepickerMax': { 'max': _this.max, 'actual': beginDate } };
                      }
                      if (endDate && _this._dateAdapter.compareDate(_this.max, endDate) < 0) {
                          return { 'matDatepickerMax': { 'max': _this.max, 'actual': endDate } };
                      }
                  }
                  return null;
              }
              /** @type {?} */
              var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
              return (!_this.max || !controlValue ||
                  _this._dateAdapter.compareDate(_this.max, controlValue) >= 0) ?
                  null : { 'matDatepickerMax': { 'max': _this.max, 'actual': controlValue } };
          };
          /**
           * The form control validator for the date filter.
           */
          this._filterValidator = function (control) {
              if (_this._datepicker.rangeMode && control.value) {
                  /** @type {?} */
                  var beginDate = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value.begin));
                  /** @type {?} */
                  var endDate = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value.end));
                  return !_this._dateFilter || !beginDate && !endDate ||
                      _this._dateFilter(beginDate) && _this._dateFilter(endDate) ?
                      null : { 'matDatepickerFilter': true };
              }
              /** @type {?} */
              var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
              return !_this._dateFilter || !controlValue || _this._dateFilter(controlValue) ?
                  null : { 'matDatepickerFilter': true };
          };
          /**
           * The form control validator for the date filter.
           */
          this._rangeValidator = function (control) {
              if (_this._datepicker.rangeMode && control.value) {
                  /** @type {?} */
                  var beginDate = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value.begin));
                  /** @type {?} */
                  var endDate = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value.end));
                  return !beginDate || !endDate || _this._dateAdapter.compareDate(beginDate, endDate) <= 0 ?
                      null : { 'matDatepickerRange': true };
              }
              return null;
          };
          /**
           * The combined form control validator for this input.
           */
          this._validator = forms.Validators.compose([this._parseValidator, this._minValidator, this._maxValidator,
              this._filterValidator, this._rangeValidator]);
          /**
           * Whether the last value set on the input was valid.
           */
          this._lastValueValid = false;
          if (!this._dateAdapter) {
              throw createMissingDateImplError('DateAdapter');
          }
          if (!this._dateFormats) {
              throw createMissingDateImplError('MAT_DATE_FORMATS');
          }
          // Update the displayed date when the locale changes.
          this._localeSubscription = _dateAdapter.localeChanges.subscribe(function () {
              _this.value = _this.value;
          });
      }
      Object.defineProperty(SatDatepickerInput.prototype, "satDatepicker", {
          /** The datepicker that this input is associated with. */
          set: /**
           * The datepicker that this input is associated with.
           * @param {?} value
           * @return {?}
           */ function (value) {
              this.registerDatepicker(value);
          },
          enumerable: true,
          configurable: true
      });
      /**
       * @param {?} value
       * @return {?}
       */
      SatDatepickerInput.prototype.registerDatepicker = /**
       * @param {?} value
       * @return {?}
       */
          function (value) {
              if (value) {
                  this._datepicker = value;
                  this._datepicker._registerInput(this);
              }
          };
      Object.defineProperty(SatDatepickerInput.prototype, "matDatepickerFilter", {
          /** Function that can be used to filter out dates within the datepicker. */
          set: /**
           * Function that can be used to filter out dates within the datepicker.
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._dateFilter = value;
              this._validatorOnChange();
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepickerInput.prototype, "value", {
          /** The value of the input. */
          get: /**
           * The value of the input.
           * @return {?}
           */ function () {
              return this._value;
          },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {
                  /** *
                   * Range mode
                    @type {?} */
                  var rangeValue = (value);
                  rangeValue.begin = this._dateAdapter.deserialize(rangeValue.begin);
                  rangeValue.end = this._dateAdapter.deserialize(rangeValue.end);
                  this._lastValueValid = !rangeValue.begin || !rangeValue.end ||
                      this._dateAdapter.isValid(rangeValue.begin) && this._dateAdapter.isValid(rangeValue.end);
                  rangeValue.begin = this._getValidDateOrNull(rangeValue.begin);
                  rangeValue.end = this._getValidDateOrNull(rangeValue.end);
                  /** @type {?} */
                  var oldDate = (this.value);
                  this._elementRef.nativeElement.value =
                      rangeValue && rangeValue.begin && rangeValue.end
                          ? this._dateAdapter.format(rangeValue.begin, this._dateFormats.display.dateInput) +
                              ' - ' +
                              this._dateAdapter.format(rangeValue.end, this._dateFormats.display.dateInput)
                          : '';
                  if (oldDate == null && rangeValue != null || oldDate != null && rangeValue == null ||
                      !this._dateAdapter.sameDate(((oldDate)).begin, rangeValue.begin) ||
                      !this._dateAdapter.sameDate(((oldDate)).end, rangeValue.end)) {
                      if (rangeValue.end && rangeValue.begin &&
                          this._dateAdapter
                              .compareDate(rangeValue.begin, rangeValue.end) > 0) {
                          // if begin > end
                          value = null;
                      }
                      this._value = value;
                      this._valueChange.emit(value);
                  }
              }
              else {
                  /** Not range mode */
                  value = this._dateAdapter.deserialize(value);
                  this._lastValueValid = !value || this._dateAdapter.isValid(value);
                  value = this._getValidDateOrNull(value);
                  /** @type {?} */
                  var oldDate = this.value;
                  this._value = value;
                  this._elementRef.nativeElement.value =
                      value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';
                  if (!this._dateAdapter.sameDate(/** @type {?} */ (oldDate), value)) {
                      this._valueChange.emit(value);
                  }
              }
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepickerInput.prototype, "min", {
          /** The minimum valid date. */
          get: /**
           * The minimum valid date.
           * @return {?}
           */ function () { return this._min; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
              this._validatorOnChange();
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepickerInput.prototype, "max", {
          /** The maximum valid date. */
          get: /**
           * The maximum valid date.
           * @return {?}
           */ function () { return this._max; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
              this._validatorOnChange();
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SatDatepickerInput.prototype, "disabled", {
          /** Whether the datepicker-input is disabled. */
          get: /**
           * Whether the datepicker-input is disabled.
           * @return {?}
           */ function () { return !!this._disabled; },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              /** @type {?} */
              var newValue = coercion.coerceBooleanProperty(value);
              /** @type {?} */
              var element = this._elementRef.nativeElement;
              if (this._disabled !== newValue) {
                  this._disabled = newValue;
                  this._disabledChange.emit(newValue);
              }
              // We need to null check the `blur` method, because it's undefined during SSR.
              if (newValue && element.blur) {
                  // Normally, native input elements automatically blur if they turn disabled. This behavior
                  // is problematic, because it would mean that it triggers another change detection cycle,
                  // which then causes a changed after checked error if the input element was focused before.
                  element.blur();
              }
          },
          enumerable: true,
          configurable: true
      });
      /**
       * @return {?}
       */
      SatDatepickerInput.prototype.ngAfterContentInit = /**
       * @return {?}
       */
          function () {
              var _this = this;
              if (this._datepicker) {
                  this._datepickerSubscription =
                      this._datepicker._selectedChanged.subscribe(function (selected) {
                          _this.value = selected;
                          _this._cvaOnChange(selected);
                          _this._onTouched();
                          _this.dateInput.emit(new SatDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                          _this.dateChange.emit(new SatDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                      });
              }
          };
      /**
       * @return {?}
       */
      SatDatepickerInput.prototype.ngOnDestroy = /**
       * @return {?}
       */
          function () {
              this._datepickerSubscription.unsubscribe();
              this._localeSubscription.unsubscribe();
              this._valueChange.complete();
              this._disabledChange.complete();
          };
      /** @docs-private */
      /**
       * \@docs-private
       * @param {?} fn
       * @return {?}
       */
      SatDatepickerInput.prototype.registerOnValidatorChange = /**
       * \@docs-private
       * @param {?} fn
       * @return {?}
       */
          function (fn) {
              this._validatorOnChange = fn;
          };
      /** @docs-private */
      /**
       * \@docs-private
       * @param {?} c
       * @return {?}
       */
      SatDatepickerInput.prototype.validate = /**
       * \@docs-private
       * @param {?} c
       * @return {?}
       */
          function (c) {
              return this._validator ? this._validator(c) : null;
          };
      /**
       * @deprecated
       * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead
       */
      /**
       * @deprecated
       * \@deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead
       * @return {?}
       */
      SatDatepickerInput.prototype.getPopupConnectionElementRef = /**
       * @deprecated
       * \@deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead
       * @return {?}
       */
          function () {
              return this.getConnectedOverlayOrigin();
          };
      /**
       * Gets the element that the datepicker popup should be connected to.
       * @return The element to connect the popup to.
       */
      /**
       * Gets the element that the datepicker popup should be connected to.
       * @return {?} The element to connect the popup to.
       */
      SatDatepickerInput.prototype.getConnectedOverlayOrigin = /**
       * Gets the element that the datepicker popup should be connected to.
       * @return {?} The element to connect the popup to.
       */
          function () {
              return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;
          };
      // Implemented as part of ControlValueAccessor
      /**
       * @param {?} value
       * @return {?}
       */
      SatDatepickerInput.prototype.writeValue = /**
       * @param {?} value
       * @return {?}
       */
          function (value) {
              this.value = value;
          };
      // Implemented as part of ControlValueAccessor.
      /**
       * @param {?} fn
       * @return {?}
       */
      SatDatepickerInput.prototype.registerOnChange = /**
       * @param {?} fn
       * @return {?}
       */
          function (fn) {
              this._cvaOnChange = fn;
          };
      // Implemented as part of ControlValueAccessor.
      /**
       * @param {?} fn
       * @return {?}
       */
      SatDatepickerInput.prototype.registerOnTouched = /**
       * @param {?} fn
       * @return {?}
       */
          function (fn) {
              this._onTouched = fn;
          };
      // Implemented as part of ControlValueAccessor.
      /**
       * @param {?} isDisabled
       * @return {?}
       */
      SatDatepickerInput.prototype.setDisabledState = /**
       * @param {?} isDisabled
       * @return {?}
       */
          function (isDisabled) {
              this.disabled = isDisabled;
          };
      /**
       * @param {?} event
       * @return {?}
       */
      SatDatepickerInput.prototype._onKeydown = /**
       * @param {?} event
       * @return {?}
       */
          function (event) {
              if (event.altKey && event.keyCode === keycodes.DOWN_ARROW) {
                  this._datepicker.open();
                  event.preventDefault();
              }
          };
      /**
       * @param {?} value
       * @return {?}
       */
      SatDatepickerInput.prototype._onInput = /**
       * @param {?} value
       * @return {?}
       */
          function (value) {
              /** @type {?} */
              var date = null;
              if (this._datepicker.rangeMode) {
                  /** @type {?} */
                  var parts = value.split('-');
                  if (parts.length > 1) {
                      /** @type {?} */
                      var position = Math.floor(parts.length / 2);
                      /** @type {?} */
                      var beginDateString = parts.slice(0, position).join('-');
                      /** @type {?} */
                      var endDateString = parts.slice(position).join('-');
                      /** @type {?} */
                      var beginDate = this._dateAdapter.parse(beginDateString, this._dateFormats.parse.dateInput);
                      /** @type {?} */
                      var endDate = this._dateAdapter.parse(endDateString, this._dateFormats.parse.dateInput);
                      this._lastValueValid = !beginDate || !endDate || this._dateAdapter.isValid(beginDate) &&
                          this._dateAdapter.isValid(endDate);
                      beginDate = this._getValidDateOrNull(beginDate);
                      endDate = this._getValidDateOrNull(endDate);
                      if (beginDate && endDate) {
                          date = /** @type {?} */ ({ begin: beginDate, end: endDate });
                      }
                  }
              }
              else {
                  date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);
                  this._lastValueValid = !date || this._dateAdapter.isValid(date);
                  date = this._getValidDateOrNull(date);
              }
              this._value = date;
              this._cvaOnChange(date);
              this._valueChange.emit(date);
              this.dateInput.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));
          };
      /**
       * @return {?}
       */
      SatDatepickerInput.prototype._onChange = /**
       * @return {?}
       */
          function () {
              this.dateChange.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));
          };
      /** Returns the palette used by the input's form field, if any. */
      /**
       * Returns the palette used by the input's form field, if any.
       * @return {?}
       */
      SatDatepickerInput.prototype._getThemePalette = /**
       * Returns the palette used by the input's form field, if any.
       * @return {?}
       */
          function () {
              return this._formField ? this._formField.color : undefined;
          };
      /** Handles blur events on the input. */
      /**
       * Handles blur events on the input.
       * @return {?}
       */
      SatDatepickerInput.prototype._onBlur = /**
       * Handles blur events on the input.
       * @return {?}
       */
          function () {
              // Reformat the input only if we have a valid value.
              if (this.value) {
                  this._formatValue(this.value);
              }
              this._onTouched();
          };
      /**
       * Formats a value and sets it on the input element.
       * @param {?} value
       * @return {?}
       */
      SatDatepickerInput.prototype._formatValue = /**
       * Formats a value and sets it on the input element.
       * @param {?} value
       * @return {?}
       */
          function (value) {
              if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {
                  value = /** @type {?} */ (value);
                  this._elementRef.nativeElement.value =
                      value && value.begin && value.end
                          ? this._dateAdapter.format(value.begin, this._dateFormats.display.dateInput) +
                              ' - ' +
                              this._dateAdapter.format(value.end, this._dateFormats.display.dateInput)
                          : '';
              }
              else {
                  value = /** @type {?} */ (value);
                  this._elementRef.nativeElement.value =
                      value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';
              }
          };
      /**
       * @param {?} obj The object to check.
       * @return {?} The given object if it is both a date instance and valid, otherwise null.
       */
      SatDatepickerInput.prototype._getValidDateOrNull = /**
       * @param {?} obj The object to check.
       * @return {?} The given object if it is both a date instance and valid, otherwise null.
       */
          function (obj) {
              return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
          };
      SatDatepickerInput.decorators = [
          { type: i0.Directive, args: [{
                      selector: 'input[satDatepicker]',
                      providers: [
                          MAT_DATEPICKER_VALUE_ACCESSOR,
                          MAT_DATEPICKER_VALIDATORS,
                          { provide: input.MAT_INPUT_VALUE_ACCESSOR, useExisting: SatDatepickerInput },
                      ],
                      host: {
                          '[attr.aria-haspopup]': 'true',
                          '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',
                          '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',
                          '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',
                          '[disabled]': 'disabled',
                          '(input)': '_onInput($event.target.value)',
                          '(change)': '_onChange()',
                          '(blur)': '_onBlur()',
                          '(keydown)': '_onKeydown($event)',
                      },
                      exportAs: 'matDatepickerInput',
                  },] }
      ];
      /** @nocollapse */
      SatDatepickerInput.ctorParameters = function () {
          return [
              { type: i0.ElementRef },
              { type: DateAdapter, decorators: [{ type: i0.Optional }] },
              { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_DATE_FORMATS,] }] },
              { type: formField.MatFormField, decorators: [{ type: i0.Optional }] }
          ];
      };
      SatDatepickerInput.propDecorators = {
          satDatepicker: [{ type: i0.Input }],
          matDatepickerFilter: [{ type: i0.Input }],
          value: [{ type: i0.Input }],
          min: [{ type: i0.Input }],
          max: [{ type: i0.Input }],
          disabled: [{ type: i0.Input }],
          dateChange: [{ type: i0.Output }],
          dateInput: [{ type: i0.Output }]
      };
      return SatDatepickerInput;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  /**
   * Can be used to override the icon of a `matDatepickerToggle`.
   */
  var SatDatepickerToggleIcon = (function () {
      function SatDatepickerToggleIcon() {
      }
      SatDatepickerToggleIcon.decorators = [
          { type: i0.Directive, args: [{
                      selector: '[matDatepickerToggleIcon]'
                  },] }
      ];
      return SatDatepickerToggleIcon;
  }());
  /**
   * @template D
   */
  var SatDatepickerToggle = (function () {
      function SatDatepickerToggle(_intl, _changeDetectorRef) {
          this._intl = _intl;
          this._changeDetectorRef = _changeDetectorRef;
          this._stateChanges = rxjs.Subscription.EMPTY;
      }
      Object.defineProperty(SatDatepickerToggle.prototype, "disabled", {
          /** Whether the toggle button is disabled. */
          get: /**
           * Whether the toggle button is disabled.
           * @return {?}
           */ function () {
              return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;
          },
          set: /**
           * @param {?} value
           * @return {?}
           */ function (value) {
              this._disabled = coercion.coerceBooleanProperty(value);
          },
          enumerable: true,
          configurable: true
      });
      /**
       * @param {?} changes
       * @return {?}
       */
      SatDatepickerToggle.prototype.ngOnChanges = /**
       * @param {?} changes
       * @return {?}
       */
          function (changes) {
              if (changes["datepicker"]) {
                  this._watchStateChanges();
              }
          };
      /**
       * @return {?}
       */
      SatDatepickerToggle.prototype.ngOnDestroy = /**
       * @return {?}
       */
          function () {
              this._stateChanges.unsubscribe();
          };
      /**
       * @return {?}
       */
      SatDatepickerToggle.prototype.ngAfterContentInit = /**
       * @return {?}
       */
          function () {
              this._watchStateChanges();
          };
      /**
       * @param {?} event
       * @return {?}
       */
      SatDatepickerToggle.prototype._open = /**
       * @param {?} event
       * @return {?}
       */
          function (event) {
              if (this.datepicker && !this.disabled) {
                  this.datepicker.open();
                  event.stopPropagation();
              }
          };
      /**
       * @return {?}
       */
      SatDatepickerToggle.prototype._watchStateChanges = /**
       * @return {?}
       */
          function () {
              var _this = this;
              /** @type {?} */
              var datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : rxjs.of();
              /** @type {?} */
              var inputDisabled = this.datepicker && this.datepicker._datepickerInput ?
                  this.datepicker._datepickerInput._disabledChange : rxjs.of();
              /** @type {?} */
              var datepickerToggled = this.datepicker ?
                  rxjs.merge(this.datepicker.openedStream, this.datepicker.closedStream) :
                  rxjs.of();
              this._stateChanges.unsubscribe();
              this._stateChanges = rxjs.merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(function () { return _this._changeDetectorRef.markForCheck(); });
          };
      SatDatepickerToggle.decorators = [
          { type: i0.Component, args: [{
                      moduleId: module.id,
                      selector: 'sat-datepicker-toggle',
                      template: "<button\n        mat-icon-button\n        type=\"button\"\n        aria-haspopup=\"true\"\n        [attr.aria-label]=\"_intl.openCalendarLabel\"\n        [disabled]=\"disabled\"\n        (click)=\"_open($event)\">\n\n    <svg\n            *ngIf=\"!_customIcon\"\n            class=\"mat-datepicker-toggle-default-icon\"\n            viewBox=\"0 0 24 24\"\n            width=\"24px\"\n            height=\"24px\"\n            fill=\"currentColor\"\n            focusable=\"false\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        <path d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/>\n    </svg>\n\n    <ng-content select=\"[matDatepickerToggleIcon]\"></ng-content>\n</button>\n",
                      host: {
                          'class': 'mat-datepicker-toggle',
                          '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',
                          '[class.mat-accent]': 'datepicker && datepicker.color === "accent"',
                          '[class.mat-warn]': 'datepicker && datepicker.color === "warn"',
                      },
                      exportAs: 'matDatepickerToggle',
                      encapsulation: i0.ViewEncapsulation.None,
                      changeDetection: i0.ChangeDetectionStrategy.OnPush,
                      styles: [".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}"]
                  }] }
      ];
      /** @nocollapse */
      SatDatepickerToggle.ctorParameters = function () {
          return [
              { type: SatDatepickerIntl },
              { type: i0.ChangeDetectorRef }
          ];
      };
      SatDatepickerToggle.propDecorators = {
          datepicker: [{ type: i0.Input, args: ['for',] }],
          disabled: [{ type: i0.Input }],
          _customIcon: [{ type: i0.ContentChild, args: [SatDatepickerToggleIcon,] }]
      };
      return SatDatepickerToggle;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */
  var SatDatepickerModule = (function () {
      function SatDatepickerModule() {
      }
      SatDatepickerModule.decorators = [
          { type: i0.NgModule, args: [{
                      imports: [
                          common.CommonModule,
                          button.MatButtonModule,
                          dialog.MatDialogModule,
                          overlay.OverlayModule,
                          a11y.A11yModule,
                          portal.PortalModule,
                      ],
                      exports: [
                          SatCalendar,
                          SatCalendarBody,
                          SatDatepicker,
                          SatDatepickerContent,
                          SatDatepickerInput,
                          SatDatepickerToggle,
                          SatDatepickerToggleIcon,
                          SatMonthView,
                          SatYearView,
                          SatMultiYearView,
                          SatCalendarHeader,
                      ],
                      declarations: [
                          SatCalendar,
                          SatCalendarBody,
                          SatDatepicker,
                          SatDatepickerContent,
                          SatDatepickerInput,
                          SatDatepickerToggle,
                          SatDatepickerToggleIcon,
                          SatMonthView,
                          SatYearView,
                          SatMultiYearView,
                          SatCalendarHeader,
                      ],
                      providers: [
                          SatDatepickerIntl,
                          MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,
                      ],
                      entryComponents: [
                          SatDatepickerContent,
                          SatCalendarHeader,
                      ]
                  },] }
      ];
      return SatDatepickerModule;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
   */

  exports.NativeDateModule = NativeDateModule;
  exports.SatNativeDateModule = SatNativeDateModule;
  exports.MAT_DATE_LOCALE = MAT_DATE_LOCALE;
  exports.MAT_DATE_LOCALE_FACTORY = MAT_DATE_LOCALE_FACTORY;
  exports.MAT_DATE_LOCALE_PROVIDER = MAT_DATE_LOCALE_PROVIDER;
  exports.DateAdapter = DateAdapter;
  exports.MAT_DATE_FORMATS = MAT_DATE_FORMATS;
  exports.NativeDateAdapter = NativeDateAdapter;
  exports.MAT_NATIVE_DATE_FORMATS = MAT_NATIVE_DATE_FORMATS;
  exports.SatDatepickerModule = SatDatepickerModule;
  exports.SatCalendarHeader = SatCalendarHeader;
  exports.SatCalendar = SatCalendar;
  exports.SatCalendarCell = SatCalendarCell;
  exports.SatCalendarBody = SatCalendarBody;
  exports.MAT_DATEPICKER_SCROLL_STRATEGY = MAT_DATEPICKER_SCROLL_STRATEGY;
  exports.MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY = MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY;
  exports.MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER;
  exports.SatDatepickerContentBase = SatDatepickerContentBase;
  exports._SatDatepickerContentMixinBase = _SatDatepickerContentMixinBase;
  exports.SatDatepickerContent = SatDatepickerContent;
  exports.SatDatepicker = SatDatepicker;
  exports.matDatepickerAnimations = matDatepickerAnimations;
  exports.MAT_DATEPICKER_VALUE_ACCESSOR = MAT_DATEPICKER_VALUE_ACCESSOR;
  exports.MAT_DATEPICKER_VALIDATORS = MAT_DATEPICKER_VALIDATORS;
  exports.SatDatepickerInputEvent = SatDatepickerInputEvent;
  exports.SatDatepickerInput = SatDatepickerInput;
  exports.SatDatepickerIntl = SatDatepickerIntl;
  exports.SatDatepickerToggleIcon = SatDatepickerToggleIcon;
  exports.SatDatepickerToggle = SatDatepickerToggle;
  exports.SatMonthView = SatMonthView;
  exports.SatYearView = SatYearView;
  exports.ɵa = SatMultiYearView;

  Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,