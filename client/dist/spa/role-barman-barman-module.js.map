{"version":3,"sources":["webpack:///./src/app/role/barman/barman-order-list/barman-order-list.component.css","webpack:///./src/app/role/barman/barman-order-list/barman-order-list.component.html","webpack:///./src/app/role/barman/barman-order-list/barman-order-list.component.ts","webpack:///./src/app/role/barman/barman-routing.module.ts","webpack:///./src/app/role/barman/barman.module.ts","webpack:///./src/app/role/barman/barman.service.ts"],"names":[],"mappings":"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","file":"role-barman-barman-module.js","sourcesContent":["module.exports = \".mat-card:not([class*=mat-elevation-z]) {\\n  box-shadow: 0px 2px 6px 0px rgba(0,0,0,.12);\\n}\\n\\n::ng-deep .mat-card-header-text {\\nmargin: 0;\\n}\\n\\n.mcard{\\nmargin-left: 5px;\\nmargin-top: 5px;\\n}\\n\\n.card {\\n  margin-bottom: 1%;\\n}\"","module.exports = \"<div class=\\\"mcard\\\" fxLayout=\\\"row wrap\\\" fxLayout.sm=\\\"column\\\" fxLayoutGap=\\\"1%\\\" fxLayoutWrap fxLayoutAlign=\\\"space-between center\\\" fxLayoutAlign.sm=\\\"center\\\"   >\\n    <mat-card *ngFor=\\\"let order of orders$ | async; let i = index\\\" class=\\\"card\\\" fxFlex=\\\"49%\\\" fxFlex.xs=\\\"100\\\">\\n        <mat-card-header fxLayout=\\\"row\\\">\\n            <div  fxLayout=\\\"row\\\" fxFlex=\\\"70\\\">\\n                <div mat-card-avatar [ngStyle]=\\\"{'background-image':'url(/backend/api/storages/images/download/'+order.item.image+')'}\\\" style=\\\"background-size: cover;\\\"></div>\\n                <div fxLayout=\\\"column\\\"> \\n                    <mat-card-title>{{order.item.name}} <mat-icon *ngIf=\\\"order.menuItem\\\" aria-label=\\\"Menu order\\\">restaurant_menu</mat-icon></mat-card-title>\\n                    <mat-card-subtitle>{{order.quantity}} x {{order.sellingPrice | currency}}</mat-card-subtitle>\\n                </div>\\n            </div>\\n            <div fxLayout=\\\"column\\\" fxFlex fxLayoutAlign.sm=\\\"end center\\\">\\n              <div [ngSwitch]=\\\"order.state\\\">\\n                <ng-container *ngSwitchCase= \\\"'new'\\\">   \\n                  <button mat-icon-button  color=\\\"primary\\\">\\n                    <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">fiber_new</mat-icon>\\n                  </button> \\n                </ng-container>\\n                <ng-container *ngSwitchCase= \\\"'progress'\\\">\\n                  <button mat-icon-button color=\\\"primary\\\">\\n                    <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">update</mat-icon>\\n                  </button> \\n                </ng-container>\\n                <ng-container *ngSwitchCase= \\\"'ready'\\\">\\n                  <button mat-icon-button color=\\\"primary\\\">\\n                    <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">thumb_up_alt</mat-icon>\\n                  </button>                 \\n                </ng-container>\\n                <ng-container *ngSwitchCase= \\\"'served'\\\">                \\n                  <button mat-icon-button color=\\\"primary\\\">\\n                    <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">restaurant_menu</mat-icon>\\n                  </button>    \\n                </ng-container>\\n              </div> \\n            </div>\\n        </mat-card-header>\\n        <mat-card-actions fxLayout=\\\"row\\\">\\n            <div fxFlex=\\\"70\\\">\\n  \\n            </div>\\n            <div [ngSwitch]=\\\"order.state\\\">\\n                <ng-container *ngSwitchCase= \\\"'new'\\\">   \\n                    <div fxFlex>\\n                        <button  mat-button (click)=\\\"changeState(order.id,'progress', i);\\\">PROGRESS</button>\\n                    </div>\\n                </ng-container>\\n                <ng-container  *ngSwitchCase= \\\"'progress'\\\" >\\n                    <div fxFlex>\\n                        <button  mat-button (click)=\\\"changeState(order.id,'ready', i);\\\">READY</button>\\n                    </div>\\n                </ng-container>\\n                <ng-container  *ngSwitchCase= \\\"'ready'\\\">\\n                    <div fxFlex  style=\\\"height: 36px;\\\">\\n\\n                    </div>             \\n                </ng-container>\\n                <ng-container *ngSwitchCase= \\\"'served'\\\">                \\n                    <div fxFlex  style=\\\"height: 36px;\\\">\\n\\n                    </div> \\n                </ng-container>\\n              </div> \\n  \\n        </mat-card-actions>\\n    </mat-card>\\n  </div>\\n  \"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { BarmanService } from './../barman.service';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { BarmanStatService } from './../stat.service';\nimport { Order } from './../../../model/Order';\n\nimport {\n  Subscription,\n  BehaviorSubject,\n  timer\n} from 'rxjs';\nimport {\n  switchMap\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-barman-order-list',\n  templateUrl: './barman-order-list.component.html',\n  styleUrls: ['./barman-order-list.component.css']\n})\nexport class BarmanOrderListComponent  implements OnInit, OnDestroy {\n\n  private _routes: Subscription;\n\n  private _orders: Subscription = new Subscription;\n\n  public orders: BehaviorSubject<Order[]> = new BehaviorSubject<Order[]>(null);\n  public orders$ = this.orders.asObservable();\n  private filter: string | Boolean = false;\n\n  constructor(\n    private barmanService: BarmanService,\n    private route: ActivatedRoute,\n    private statService: BarmanStatService\n    ) { }\n\n  ngOnInit() {\n    this._routes = this.route.params\n    .subscribe(\n      (params: Params) => {\n        this.filter = params.filter;\n        this._orders.unsubscribe();\n        this._orders = timer(0, 1000 * 30).pipe(\n          switchMap(() => this.barmanService.getOrders(this.filter))\n        ).subscribe((result)  => this.orders.next(result));\n      }\n    );\n\n  }\n\n  changeState(id: string, state: string, index) {\n    switch (state) {\n      case 'progress':\n        this.statService.changeCounter('newOrders', 'decrement');\n        this.statService.changeCounter('progressOrders');\n        this.barmanService.progressOrder(id, index).subscribe(() => {\n          this.orders.value[index].state = 'progress';\n        });\n        break;\n      case 'ready':\n        this.statService.changeCounter('progressOrders', 'decrement');\n        this.statService.changeCounter('readyOrders');\n        this.barmanService.readyOrder(id, index).subscribe(() => {\n          this.orders.value[index].state = 'ready';\n        });\n        break;\n      default:\n        break;\n    }\n    return true;\n  }\n\n  ngOnDestroy(): void {\n    this._orders.unsubscribe();\n    this._routes.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { StubComponent } from './../../shared/stub/stub.component';\nimport { DashboardComponent } from './../../shared/dashboard/dashboard.component';\nimport { NotFoundComponent } from './../../shared/not-found/not-found.component';\n\nimport { BarmanOrderListComponent } from './barman-order-list/barman-order-list.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DashboardComponent,\n    children: [\n      { path: 'sale', component: StubComponent ,\n        children: [\n          { path: 'order', component: BarmanOrderListComponent },\n          { path: 'order/:filter/show', component: BarmanOrderListComponent },\n        ]\n      },\n      {path: '404', component: NotFoundComponent},\n      {path: '**', redirectTo: '/barman/404'}\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BarmanRoutingModule { }\n\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { BarmanRoutingModule } from './barman-routing.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  MatCardModule,\n  MatToolbarModule,\n  MatInputModule,\n  MatButtonModule,\n  MatIconModule,\n  MatSidenavModule,\n  MatListModule,\n  MatMenuModule,\n  MatExpansionModule,\n  MatTableModule,\n  MatPaginatorModule,\n  MatSortModule,\n  MatProgressSpinnerModule,\n  MatProgressBarModule,\n  MatOptionModule,\n  MatSelectModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatRadioModule,\n  MatAutocompleteModule,\n  MatSnackBarModule,\n  MatDialogModule,\n  MatBadgeModule,\n  MatTooltipModule,\n  MAT_SNACK_BAR_DEFAULT_OPTIONS\n} from '@angular/material';\n\nimport { StubSharedModule } from '../../shared/stub/stub.shared.module';\nimport { DashboardSharedModule } from '../../shared/dashboard/dashboard.shared.module';\nimport { NotFoundSharedModule } from '../../shared/not-found/not-found.shared.module';\nimport { BarmanOrderListComponent } from './barman-order-list/barman-order-list.component';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    BarmanRoutingModule,\n    MatCardModule,\n    MatToolbarModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatSidenavModule,\n    MatListModule,\n    MatMenuModule,\n    MatExpansionModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatOptionModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    FlexLayoutModule,\n    MatRadioModule,\n    MatAutocompleteModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatBadgeModule,\n    MatTooltipModule,\n    DashboardSharedModule,\n    StubSharedModule,\n    NotFoundSharedModule\n  ],\n  declarations: [\n    BarmanOrderListComponent,\n  ],\n  entryComponents: [  ],\n  providers: [\n    {provide: MAT_SNACK_BAR_DEFAULT_OPTIONS, useValue: {duration: 100000}}\n  ],\n})\nexport class BarmanModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams} from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { Order } from './../../model/Order';\n\nimport {\n  map,\n} from 'rxjs/operators';\nimport {\n  BehaviorSubject,\n  Observable,\n} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BarmanService {\n  public apiUrl = environment.apiUrl;\n  constructor(private http: HttpClient) { }\n\n  public progressOrder(id, index) {\n    return this.http.get<Order>(this.apiUrl  + 'api/relSalesInvoiceItems/progressOrder?id=' + id).pipe(\n      map(() => {\n        return 'progress';\n      })\n    );\n  }\n\n  public readyOrder(id, index) {\n    return this.http.get(this.apiUrl  + 'api/relSalesInvoiceItems/readyOrder?id=' + id\n    ).pipe(\n      map(() => {\n        return 'ready';\n      })\n    );\n  }\n\n  public getOrders(filter: string | Boolean = false) {\n    return this.http.get<Order[]>(this.apiUrl  + 'api/relSalesInvoiceItems/listOrdersBarman', {\n      params: new HttpParams()\n        .set('filter', filter.toString())\n    }).pipe(\n      map(data => {\n        return(data);\n      })\n    );\n  }\n}\n"],"sourceRoot":""}